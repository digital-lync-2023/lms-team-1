Work Item Type,Title 1,Title 2,Title 3,Title 4,Description,Acceptance Criteria,
Epic,3.FE-E3,,,,"3.FE-E3

Login and Role Based Authentication",,
Feature,,3.FE-E3-F1,,,"3.FE-E3-F1

Comprehensive Sign-In and Role-Based Navigation Experience

This F streamlines the user experience on the Kona LMS platform, from initial entry via the homepage to personalized post-login interactions. Users are welcomed with a clear ""Sign In"" prompt, leading to an intuitive login form complete with a password visibility toggle and a straightforward password recovery option. Successful authentication directs users to a role-tailored welcome page, ensuring immediate access to relevant resources. This cohesive approach simplifies navigation, enhances security, and personalizes user interaction, reflecting the platform's commitment to user-centric design and functionality.",,
Product Backlog Item,,,3.FE-E3-F1-US1,,"3.FE-E3-F1-US1

Homepage Access and Sign In Navigation

As a user, when I enter the LMS URL https://lms.digital-lync.com/ in the browser, I want to be directed to the home page where I can see a """"Sign In"""" button, so that I can easily navigate to the login page by clicking on it.""","Acceptance Criteria for Direct and Seamless Navigation to and within LMS: 3.FE-E3-F1-US1

1. Upon entering the LMS URL, users should be taken directly to the LMS home page displaying relevant content like course listings and user testimonials, without encountering any intermediary pages, pop-ups, error messages, or broken links.

2. The LMS home page and the ""Sign In"" button should load within 2-5 seconds, be prominently positioned, clearly labeled, and designed to stand out with high visibility and accessibility across different browsers (e.g., Chrome, Firefox, Safari, Edge) and devices, ensuring a consistent experience for all users, including those with disabilities.

3. Clicking the ""Sign In"" button should immediately redirect users to the login page with minimal delay and provide visual feedback during processing. If redirection fails or is delayed, an appropriate error message should be displayed. There should be no overlapping elements with the ""Sign In"" button to maintain its easy clickability.",
Task,,,,3.FE-E3-F1-US1-T1,"3.FE-E3-F1-US1-T1
 
Access to LMS Home Page upon URL Entry

As a user, when I enter the LMS URL in my browser, I want to be taken directly to the LMS home page to start my LMS experience..","Acceptance Criteria for the Product Backlog Item Access to LMS Home Page upon URL Entry E1-F1-US1-T1:

1. Direct Access: - Upon entering the LMS URL in the browser's address bar and pressing enter, the user should be directed to the LMS home page without any intermediary pages or pop-ups.

2. Correct Page Content: - The LMS home page should display content relevant to the Learning Management System, such as course listings, user testimonials, or an introduction to the platform.

3. Responsive Load Time: - The LMS home page should load within a reasonable time frame (e.g., 2-5 seconds depending on the content and internet speed) to ensure a smooth user experience.

4. No Errors: - The user should not encounter any error messages or broken links when accessing the LMS home page via the provided URL.

5. Consistent Experience Across Browsers: - The LMS home page should display consistently and without issues across different browsers (e.g., Chrome, Firefox, Safari, Edge).",
Task,,,,3.FE-E3-F1-US1-T2,"3.FE-E3-F1-US1-T2

Prominent 'Sign In' Button on LMS Home Page

As a user, when I land on the LMS home page, I want to see a prominently displayed ""Sign In"" button so that I can easily identify where to click to log in.","Acceptance Criteria for the Product Backlog Item 'Sign In' Button on LMS Home Page E1-F1-US1-T2:

1. Position and Visibility:
   - The ""Sign In"" button should be prominently displayed on the LMS home page, ensuring it's one of the first elements a user notices.

2. Distinct Design:
   - The button should have a design (color, size, font) that makes it stand out from other elements on the page.

3. Clear Labeling:
   - The button should be clearly labeled as ""Sign In"" to avoid any confusion.

4. Accessibility:
   - The button should be easily accessible, meaning it should not be placed too far down the page where users would need to scroll extensively to find it.
   - It should also be accessible to users with disabilities, meaning it should be properly tagged for screen readers and have a sufficient contrast ratio for visibility.

5. Responsive Design:
   - The ""Sign In"" button should be clearly visible and easily clickable on both desktop and mobile versions of the LMS home page.

6. Functionality:
   - Clicking the ""Sign In"" button should lead the user directly to the login page without any significant delay.

7. No Overlapping Elements:
   - No other elements or pop-ups should obscure or overlap with the ""Sign In"" button, ensuring it's always easily clickable.",
Task,,,,3.FE-E3-F1-US1-T3,"3.FE-E3-F1-US1-T3

Seamless Navigation to Login Page

As a user, when I click on the ""Sign In"" button from the home page, I want to be quickly redirected to the LMS login page without any significant delay, ensuring a smooth transition.","Acceptance Criteria for the Product Backlog Item Navigation to Login Page E1-F1-US1-T3:

1. Immediate Response:
   - Upon clicking the ""Sign In"" button, the system should immediately initiate the redirection process to the LMS login page.

2. Correct Redirection:
   - The user should be taken directly to the LMS login page, not any intermediate or unrelated pages.

3. Minimal Delay:
   - The time between clicking the ""Sign In"" button and the LMS login page fully loading should be minimal, ensuring a seamless user experience.

4. Visual Feedback:
   - If there's any processing time, the user should receive visual feedback (e.g., a loading spinner or animation) to indicate that the action is being processed.

5. Error Handling:
   - If, for any reason, the redirection fails or takes longer than expected, an appropriate error message or notification should be displayed to inform the user of the issue.

6. Consistent Behavior:
   - The redirection behavior should be consistent across different browsers and devices, ensuring all users have a similar experience.",
Product Backlog Item,,,3.FE-E3-F1-US2,,"3.FE-E3-F1-US2

Login Form Fs and Options for LMS Users

As an LMS user, on clicking ""Sign In"", I expect a login form with email and password fields, a password visibility toggle, a ""Forgot Password"" option, and a ""Continue"" button.","Acceptance Criteria for Visibility of Login Form Elements (User Story: 3.FE-E3-F1-US2):

1. **Form Display**: The login form should appear promptly and be prominently displayed in the user interface when the ""Sign In"" button is clicked.

2. **Email and Password Fields**: Both fields should be immediately noticeable upon form activation, with the email field positioned above the password field.

3. **Password Visibility Toggle**: An icon (e.g., an eye symbol) should be clearly visible adjacent to the password field to indicate the visibility toggle option.

4. **Forgot Password Option**: A clearly labeled ""Forgot Password"" link or button should be easily identifiable and accessible on the form.

5. **Continue Button**: The ""Continue"" button should be conspicuously placed, typically below the email and password fields, to guide users through the login process.

Each element must not only be present but also be arranged in a logical, user-friendly layout that aligns with standard UI/UX practices to ensure a seamless user experience.",
Task,,,,3.FE-E3-F1-US1-T1,"3.FE-E3-F1-US2-T1

Display Login Form on 'Sign In' Click

As an LMS user, when I click ""Sign In"", I want to see a login form where I can enter my credentials.","Acceptance Criteria for Login Form E1-F1-US2-T1:

1. Form Visibility:
   - Upon clicking the ""Sign In"" button, the login form should be clearly visible and accessible to the user.

2. Email Field:
   - The login form should have a labeled input field for the user to enter their registered email address.

3. Password Field:
   - The login form should have a labeled input field for the user to enter their password.

4. Clear Labels:
   - Both the email and password fields should have clear and understandable labels indicating what information the user should enter.

5. Form Layout:
   - The layout of the form should be intuitive, with the email field positioned above the password field.

6. Error Handling:
   - If there's an issue with the form (e.g., a missing or incorrect field), an appropriate error message should be displayed to guide the user on the necessary corrective action.",
Task,,,,3.FE-E3-F1-US1-T2,"3.FE-E3-F1-US2-T2

Email Input Field in Login Form

As an LMS user, within the login form, I want to have an input field where I can enter my registered email address.","Acceptance Criteria for Email Input Field in Login Form E1-F1-US2-T2:

1. Presence of Field:
   - The login form should clearly display an input field labeled ""Email"" or ""Email Address"".

2. Input Type:
   - The email input field should be of type ""email"" to facilitate the correct keyboard layout on mobile devices and basic validation on desktop browsers.

3. Placeholder Text:
   - The email input field should have placeholder text (e.g., ""example@email.com"") to guide users on the expected format.

4. Validation:
   - If a user enters text that doesn't match the standard email format, an appropriate error message should be displayed (e.g., ""Please enter a valid email address"").

5. Mandatory Field:
   - The email input field should be mandatory. If a user tries to submit the form without entering an email, an error message should be displayed (e.g., ""Email address is required"").

6. Field Size:
   - The email input field should be of adequate size to accommodate most email addresses without truncating them.",
Task,,,,3.FE-E3-F1-US1-T3,"3.FE-E3-F1-US2-T3

Secure Password Input Field in Login Form

As an LMS user, within the login form, I want to have a secure input field where I can enter my password.","Acceptance Criteria for Password Input Field  E1-F1-US2-T3:

1. Presence of Field:
   - The login form should clearly display a designated input field for entering the password.

2. Field Labeling:
   - The password input field should be appropriately labeled as ""Password"" or a similar clear descriptor.

3. Secure Entry:
   - The characters entered into the password field should be obscured (typically displayed as dots or asterisks) to prevent anyone from seeing the actual password.

4. Input Length:
   - Users should be able to enter a password of a length that matches the system's password policy (e.g., a minimum of 8 characters).

5. Field Validation:
   - If the user attempts to submit the form without entering a password or enters an invalid format, an appropriate error message should be displayed.",
Task,,,,3.FE-E3-F1-US1-T4,"3.FE-E3-F1-US2-T4

Password Visibility Toggle for LMS Login

As an LMS user, when entering my password, I want to have a visibility toggle option so I can choose to either hide or display the characters of my password for better accuracy.","Acceptance Criteria for Password Visibility Toggle  E1-F1-US2-T4:

1. Default State:
   - Initially, the password input field should mask/hide the characters entered by the user for security.

2. Toggle Presence:
   - A visibility toggle icon (commonly represented as an eye icon) should be present adjacent to the password input field.

3. Toggle Functionality:
   - When the user clicks on the visibility toggle icon, the characters in the password field should be revealed as plain text.
   - Clicking the toggle icon again should revert the characters back to their masked/hidden state.

4. Intuitive Design:
   - The visibility toggle icon should be easily recognizable and intuitive, indicating its function to the user.
   - The icon's design should change to reflect the current state (e.g., an ""open eye"" when characters are visible and a ""closed eye"" when they are hidden).

5. No Data Alteration:
   - Toggling the visibility should only change the display of the password characters and should not alter the actual data entered by the user.

6. Consistent Behavior:
   - The visibility toggle functionality should work consistently across different browsers and devices.",
Task,,,,3.FE-E3-F1-US1-T5,"3.FE-E3-F1-US2-T5

Login Credential Submission via 'Continue' Button

As an LMS user, after entering my email and password, I want to see a ""Continue"" button that I can click to submit my login credentials and access the LMS.","Acceptance Criteria for ""Continue"" Button on Login Form E1-F1-US2-T5:

1. Button Visibility:
   - The ""Continue"" button should be clearly visible and positioned appropriately on the login form, preferably below the email and password fields.

2. Button Label:
   - The button should be labeled ""Continue"" to ensure users understand its purpose.

3. Active State:
   - The ""Continue"" button should only be active (clickable) when both the email and password fields have been filled out.

4. Functionality:
   - On clicking the ""Continue"" button, the system should validate the entered email and password against the registered user database.

5. Error Handling:
   - If the entered email or password is incorrect, the user should be presented with an appropriate error message.
   - Multiple consecutive failed login attempts should trigger additional security measures, such as CAPTCHA or account lockout, to prevent brute force attacks.

6. Successful Login:
   - Upon successful validation of the email and password, the user should be redirected to the main dashboard or homepage of the LMS.",
Product Backlog Item,,,3.FE-E3-F1-US3,,"3.FE-E3-F1-US3

Implementation of 'Forgot Password' Option for Password Recovery

As an LMS user, if I forget my password, I want to see a """"Forgot Password"""" option on the login form that I can click to initiate the password recovery process.""","Acceptance Criteria for User Story FE-E3-F1-US3:

1. **Option Visibility**: The ""Forgot Password"" option must be clearly visible and easily identifiable on the login form.

2. **Click Functionality**: When the ""Forgot Password"" option is clicked, it should prompt the user to enter their registered email address for password recovery.

3. **Input Field**: There must be an input field for the user to type in their email address, with placeholder text indicating the expected format (e.g., ""example@email.com"").

4. **Validation**: The system should validate the format of the entered email and confirm whether it is associated with an existing user account.

5. **Error Messaging**: If the user enters an email not found in the system, display an appropriate error message (e.g., ""No account found with that email address."").

6. **Recovery Email**: Upon entering a valid email and submitting the request, the system should automatically send a password recovery link or code to the user's registered email address.

7. **Confirmation Message**: After the user submits their email for password recovery, a confirmation message should appear indicating that an email has been sent with further instructions.

8. **Security Measures**: Implement security checks to prevent abuse of the password recovery option, such as limiting the number of requests that can be made within a certain time frame.

9. **Accessibility**: Ensure the ""Forgot Password"" option and the subsequent recovery process are accessible to users with disabilities, complying with WCAG guidelines.",
Task,,,,3.FE-E3-F1-US3-T1,"3.FE-E3-F1-US3-T1

Display ""Forgot Password"" Option

As an LMS user, when I access the login form, I want to see a clearly labeled ""Forgot Password"" option, so I know there's a way to recover my password if I forget it.","Acceptance Criteria for ""Forgot Password"" Option E1-F1-US3-T1:

1. Visibility on Login Form:
   - The ""Forgot Password"" option should be prominently displayed on the login form, ensuring it's easily noticeable to users.

2. Clear Labeling:
   - The option should be clearly labeled as ""Forgot Password"" or a similar phrase that unambiguously conveys its purpose.

3. Positioning:
   - The option should be positioned near the password input field, ensuring logical flow and ease of use.

5. Clickable Link or Button:
   - The ""Forgot Password"" option should be clickable, either as a link or a button, to initiate the password recovery process.

6. Error Handling:
   - If there's any issue or error with the ""Forgot Password"" option (e.g., link not working), an appropriate error message should be displayed to inform the user.",
Task,,,,3.FE-E3-F1-US3-T2,"3.FE-E3-F1-US3-T2

Click to Navigate to Recovery Page

As an LMS user, when I click on the """"Forgot Password"""" option, I want to be directed to a dedicated password recovery page, so I can initiate the process without confusion.""","Acceptance Criteria for ""Click to Navigate to Recovery Page""  E1-F1-US3-T2:

1. Visibility of Option:
   - The ""Forgot Password"" option should be clearly visible and accessible on the login form.

2. Immediate Redirection:
   - Upon clicking the ""Forgot Password"" option, the user should be immediately redirected to the password recovery page without any significant delay.

3. Distinct Recovery Page:
   - The password recovery page should be distinctly different from other pages, ensuring users understand they are on the right page to initiate the password recovery process.

4. Clear Instructions:
   - The password recovery page should provide clear instructions on how to proceed with the recovery process, ensuring users know the next steps.

5. Email Input Field:
   - The recovery page should have an input field where users can enter their registered email address to receive recovery instructions.

6. Error Handling:
   - If there's an issue redirecting to the recovery page or if the page fails to load, an appropriate error message should be displayed to inform the user of the problem.",
Task,,,,3.FE-E3-F1-US3-T3,"3.FE-E3-F1-US3-T3

Enter Registered Email for Recovery

As an LMS user, on the password recovery page, I want to be prompted to enter my registered email address, so the system can verify my identity and send me recovery instructions.""","Acceptance Criteria for ""Enter Registered Email for Recovery""  E1-F1-US3-T3:

1. Presence of Email Input Field:
   - The password recovery page should have a clearly labeled input field for users to enter their email address.

2. Placeholder Text:
   - The email input field should have placeholder text (e.g., ""Enter your registered email"") to guide users.

3. Validation of Email Format:
   - The system should validate that the entered text is in a valid email format (e.g., ""user@example.com"").

4. Error Message for Invalid Email Format:
   - If the user enters an email in an incorrect format, an appropriate error message should be displayed (e.g., ""Please enter a valid email address"").

5. Submit Option:
   - There should be a Continue Button or option to submit the entered email for the recovery process.

6. Feedback on Submission:
   - After submitting the email, the user should receive feedback, such as a message stating that if the email is registered, they will receive recovery instructions.

7. Link to Return to Login:
   - There should be a clear option for users to return to the login page if they remember their password or decide not to proceed with the recovery.",
Task,,,,3.FE-E3-F1-US3-T4,"3.FE-E3-F1-US3-T4

Receive Password Recovery Email

As an LMS user, after entering my registered email, I want to receive a password recovery email with instructions and/or a reset link, so I can follow the steps to set a new password.""","Acceptance Criteria for ""Receive Password Recovery Email"" E1-F1-US3-T4:

1. Email Trigger:
   - Upon entering a registered email address and requesting a password reset, the system should automatically trigger a password recovery email.

2. Valid Email Check:
   - The system should verify that the entered email address is associated with an active LMS user account before sending the recovery email.

3. Email Content:
   - The password recovery email should clearly state its purpose to avoid confusion.
   - The email should contain either:
     a. Clear step-by-step instructions on how to reset the password.
     b. A unique, time-sensitive reset link that the user can click to be directed to the password reset page.

4. Security Measures:
   - The reset link provided in the email should be time-bound, expiring after a certain duration (e.g., 24 hours) to enhance security.
   - The link should be unique to the user and the specific password reset request, preventing reuse.

5. Error Handling:
   - If the user enters an email not registered with the LMS, they should receive a notification or message indicating that the email is not recognized.

6. Confirmation:
   - After the password recovery email is sent, the user should see a confirmation message on the LMS platform, advising them to check their email.

7. Support Information:
   - The recovery email should include contact information or links for support in case the user encounters issues or has questions about the password reset process.",
Task,,,,3.FE-E3-F1-US3-T5,"3.FE-E3-F1-US3-T5

Confirmation of Successful Password Reset

As an LMS user, after resetting my password, I want to receive a confirmation message or email, so I'm assured that the process was successful and my account is secure.""","Acceptance Criteria for Confirmation of Successful Password Reset  E1-F1-US3-T5:

1. Immediate On-Screen Confirmation:
   - After successfully resetting the password, the user should immediately see an on-screen confirmation message stating that the password has been reset successfully.

2. Clear and Concise Message:
   - The on-screen confirmation message should be clear and concise, such as ""Your password has been successfully reset.""

3. Confirmation Email:
   - In addition to the on-screen message, the user should receive a confirmation email to their registered email address.

4. Email Content:
   - The confirmation email should contain:
     - A subject line indicating successful password reset, e.g., ""Password Reset Successful"".
     - A message body reassuring the user that their password has been changed and providing any additional steps or recommendations, if necessary.
     - Information on how to contact support in case of any issues.

5. Security Reminder:
   - The confirmation email should also include a reminder for the user to ensure the security of their account, such as not sharing passwords and ensuring the use of strong, unique passwords.

6. No Password Display:
   - At no point should the actual password (old or new) be displayed or sent in the confirmation email for security reasons.

7. Prompt Notification:
   - The confirmation email should be sent promptly, ideally within a few minutes of the password reset.

8. Access to Account:
   - After the password reset and receiving confirmation, the user should be able to log into the LMS using their new password without any issues.",
Product Backlog Item,,,3.FE-E3-F1-US4,,"3.FE-E3-F1-US4

Role-Specific Welcome Page Navigation on Successful Login

As a user of Kona LMS, after I log in successfully, I want to be directed to a welcome page tailored to my user role, so that I can access the relevant Fs and information specific to my role.""","Acceptance Criteria for User Story 3.FE-E3-F1-US4:

1. **Role Recognition**: Upon successful login, the system must immediately recognize the user's role within Kona LMS (e.g., Student, Instructor, Administrator).

2. **Dynamic Redirection**: The user should be automatically and dynamically redirected to a role-specific welcome page that corresponds to their recognized role.

3. **Relevant Content**: The role-specific welcome page must display features and information pertinent to the user‚Äôs role, such as relevant tools, dashboards, announcements, or resources.

4. **Navigation Efficiency**: The redirection process should be smooth and efficient, minimizing load times to ensure a seamless user experience.

5. **Access Verification**: Users should only be able to access the welcome page and subsequent features that are appropriate for their role, adhering to the permissions and security protocols of Kona LMS.

6. **Fallback Mechanism**: In the event of a role recognition failure, the system should provide a default welcome page with an option for the user to navigate to their specific role's page or contact support for assistance.

7. **User Feedback**: After redirection, users should have an option to confirm if the welcome page meets their needs or provide feedback for further personalization or improvement.

8. **Consistency Across Sessions**: The system should consistently direct the user to the appropriate role-specific welcome page on each successful login, remembering the user‚Äôs role across different sessions and devices.

9. **Error Handling**: Any errors during redirection should trigger a user-friendly message with the option to retry or seek help, ensuring the user is not left without direction.",
Task,,,,3.FE-E3-F1-US4-T1,"Learner-Specific Welcome Page Post-Login on Kona LMS

As a learner on Kona LMS, after I log in successfully, I want to be directed to a learner-specific welcome page, so that I can access courses, view my progress, and utilize tools and resources tailored for my learning experience""","Acceptance Criteria for Learner-Specific Welcome Page on Kona LMS  E1-F1-US4-T1:

1. Successful Login Redirection:
   - After a learner logs in successfully, they should be automatically redirected to the learner-specific welcome page without any additional steps or actions required.

2. Page Identification:
   - The welcome page should clearly identify itself as being tailored for learners, possibly with a header or title like ""Learner Dashboard"" or ""Welcome"".

3. Access to Courses:
   - The welcome page should display a list of courses that the learner is enrolled in.

4. Error Handling:
   - If there's an issue loading the welcome page or any of its components, an appropriate error message should be displayed to inform the learner of the problem.",
Task,,,,3.FE-E3-F1-US4-T2,"3.FE-E3-F1-US4-T2

Admin-Specific Welcome Page Post-Login on Kona LMS

As an admin on Kona LMS, after I log in successfully, I want to be directed to an admin-specific welcome page, so that I can manage courses, view user analytics, and access administrative tools and settings to oversee the platform.""","Acceptance Criteria for Admin-Specific Welcome Page on Kona LMS E1-F1-US4-T2:

1. Successful Login Redirection:
   - After a successful login as an admin, the system should automatically redirect the user to the admin-specific welcome page.

2. Distinct Admin Page:
   - The admin welcome page should be distinctly different from the regular user or instructor welcome pages, clearly indicating its administrative nature.

3. Course Management Access:
   - The admin welcome page should provide tools or links that allow the admin to create, edit, delete, or view courses.

4. Clear Navigation:
   - The admin welcome page should have a clear and intuitive navigation menu or dashboard, allowing the admin to easily access different sections of the LMS.

5. Error Handling:
   - If there's an issue loading the admin-specific welcome page, an appropriate error message should be displayed to inform the admin of the problem.",
Epic,3.FE-E4,,,,"3.FE-E4

Common Header for All LMS Pages",,
Feature,,3.FE-E4-F1,,,"3.FE-E4-F1

Enhanced User Navigation with a Common Header

Integrating seamless navigation into the LMS platform, this F unifies all pages under a consistent header, linking to the home page via the Digital Lync logo and offering a personalized menu. Users can effortlessly hover to reveal options for profile management and secure sign-out, centralizing essential functions in a single, intuitive interface, thereby enhancing user experience and platform efficiency.",,
Product Backlog Item,,,3.FE-E4-F1-US1,,"3.FE-E4-F1-US1

Common Header with Logo and User Menu

As an LMS user, I want a consistent header on every page with the Digital Lync logo (linking to the Home Page) on the left and a circle with my initials on the right. Hovering over the circle should reveal options for ""My Profile"" and ""Sign Out"" for easy navigation.","Acceptance Criteria for Common Header User Story FE-E4-F1-US1:

1. **Header Consistency**: Every page within the LMS must feature a common header that remains consistent in appearance and functionality.

2. **Logo Placement and Function**: The Digital Lync logo should be prominently displayed on the top left corner of the header. Clicking on the logo should redirect users to the Home Page.

3. **User Menu Visibility**: A circle containing the user's initials should be visible on the top right corner of the header as a part of the user menu.

4. **User Menu Interactivity**: When the user hovers over the circle with their initials, a dropdown menu should appear with at least two options: ""My Profile"" and ""Sign Out"".

5. **Navigation Functionality**: Selecting ""My Profile"" should take the user to their profile page, and selecting ""Sign Out"" should log the user out of the LMS.

6. **Responsive Design**: The header, including the logo and user menu, must be responsive and function correctly across different devices and screen sizes.

7. **Accessibility**: The header should be accessible, with the ability to navigate to the logo and user menu using keyboard shortcuts for users who cannot use a mouse.",
Task,,,,3.FE-E4-F1-US1-T1,"3.FE-E4-F1-US1-T1

Display Digital Lync Logo on Header

As a user of the LMS, I want to see the Digital Lync logo consistently positioned on the top left corner of the header on every page, ensuring brand recognition.","Acceptance Criteria for Displaying Digital Lync Logo on Header E2-F1-US1-T1:

1. Presence of Logo:
   - The Digital Lync logo should be clearly visible on the top left corner of the header on every LMS page.

2. Consistent Positioning:
   - Regardless of the page or section of the LMS, the logo's position should remain consistent, always appearing on the top left corner of the header.

3. Branding Consistency:
   - The logo displayed should be consistent with the official Digital Lync branding in terms of color, design, and dimensions.

4. Error Handling:
   - If there's an issue displaying the logo (e.g., image not loading), an appropriate placeholder or error message should be displayed.

5. Quick Loading:
   - The logo should load quickly, ensuring users don't experience unnecessary delays when accessing LMS pages.",
Task,,,,3.FE-E4-F1-US1-T2,"3.FE-E4-F1-US1-T2

Logo as Home Page Link                

As a user of the LMS, when I click on the Digital Lync logo in the header, I want to be redirected to the Home Page, ensuring quick access to the main page","Acceptance Criteria for Logo as Home Page Link E2-F1-US1-T2:

1. Presence of Logo:
   - The Digital Lync logo should be prominently displayed in the header on every page of the LMS.

2. Clickable Logo:
   - The Digital Lync logo should be clickable, acting as a button or link.

3. Direct Navigation to Home Page:
   - Upon clicking the Digital Lync logo, the user should be immediately redirected to the Home Page of the LMS.

4. Consistent Behavior:
   - The behavior of the logo link should be consistent across all pages and sections of the LMS, always leading to the Home Page.

5. Clear Visual Feedback:
   - When hovering over the Digital Lync logo, there should be clear visual feedback (e.g., cursor change) indicating that it's clickable.",
Task,,,,3.FE-E4-F1-US1-T3,"3.FE-E4-F1-US1-T3

Display User Initials Circle on Header

As a user of the LMS, I want to see a circle on the top right corner of the header displaying my login name initials, providing a personalized touch","Acceptance Criteria for Logo as Home Page Link. E2-F1-US1-T3:

1. Presence of Logo:
   - The Digital Lync logo should be prominently displayed in the header on every page of the LMS.

2. Clickable Logo:
   - The Digital Lync logo should be clickable, acting as a button or link.

3. Direct Navigation to Home Page:
   - Upon clicking the Digital Lync logo, the user should be immediately redirected to the Home Page of the LMS.

4. Consistent Behavior:
   - The behavior of the logo link should be consistent across all pages and sections of the LMS, always leading to the Home Page.

5. Clear Visual Feedback:
   - When hovering over the Digital Lync logo, there should be clear visual feedback (e.g., cursor change) indicating that it's clickable.",
Task,,,,3.FE-E4-F1-US1-T4,"3.FE-E4-F1-US1-T4

Hover to Reveal User Options

As a user of the LMS, when I hover over the circle with my initials, I expect a dropdown menu to appear, allowing me to access the options, Profile and Sign out.","Acceptance Criteria for Hover to Reveal User Options E2-F1-US1-T4:

1. Presence of Initials Circle:
   - The LMS header should clearly display a circle containing the user's login name initials on the top right corner.

2. Hover Interaction:
   - When the user hovers their cursor over the initials circle, a dropdown menu of Profile and Sign Out should appear without any significant delay.

3. Consistent Behavior:
   - The hover interaction and dropdown appearance should function consistently across all pages of the LMS.

4. Interactive Options:
   - The user-specific options in the dropdown menu should be clickable, leading the user to the respective sections or functionalities.

5. Dropdown Disappearance:
   - Moving the cursor away from the initials circle or the dropdown menu should cause the dropdown to disappear.

6. Error Handling:
   - If there's an issue displaying the dropdown or any of its options, an appropriate error message or indication should be provided to the user.",
Product Backlog Item,,,3.FE-E4-F1-US2,,"3.FE-E4-F1-US2

My Profile and Sign Out menu on hover

As a user of the LMS, when I hover over the circle with my initials in the header, I want a dropdown menu to appear, displaying options for ""My Profile"" and ""Sign Out"", so I can easily navigate to my personal settings or securely log out of the platform.","Acceptance Criteria for User Story 3.FE-E4-F1-US2:

1. **Dropdown Trigger**: When the user hovers over the circular icon containing their initials in the platform's header, a dropdown menu must appear without any clicks required.

2. **Menu Options**: The dropdown menu must display two options: ""My Profile"" and ""Sign Out.""

3. **Visibility**: The dropdown menu should be clearly visible and overlay any other content on the page to ensure it is not obstructed.

4. **Navigation**: Selecting the ""My Profile"" option should direct the user to their personal settings page. Choosing ""Sign Out"" should securely log the user out of the LMS.

5. **Responsive Interaction**: The dropdown menu should appear promptly after the cursor hovers over the icon and should disappear when the cursor moves away from the menu.

6. **Accessibility**: The dropdown menu should be accessible via keyboard navigation for users who rely on keyboard controls.

7. **Consistency**: The appearance and behavior of the dropdown menu should be consistent across all pages of the LMS where the header is present.

8. **Security**: Ensure that the ""Sign Out"" process clears the user's session to prevent unauthorized access to their account after logging out.",
Task,,,,3.FE-E4-F1-US2-T1,"3.FE-E4-F1-US2-T1

Access ""My Profile"" from Dropdown

As a user of the LMS, from the dropdown menu, I want to see and be able to click on the ""My Profile"" option, ensuring easy access to my personal details and settings","Acceptance Criteria for Accessing ""My Profile"" from Dropdown E2-F1-US2-T1:

1. Visibility: When the user hovers over the dropdown menu, the ""My Profile"" option should be clearly visible among the list of available options.

2. Clickability: The ""My Profile"" option in the dropdown should be clickable.

3. Navigation: Upon clicking the ""My Profile"" option, the user should be navigated directly to their profile page.

4. No Errors: No errors should be displayed when the user clicks on the ""My Profile"" option from the dropdown.",
Task,,,,3.FE-E4-F1-US2-T2,"3.FE-E4-F1-US2-T2

Access ""Sign Out"" from Dropdown 

As a user of the LMS, from the dropdown menu, I want to see and be able to click on the ""Sign Out"" option, ensuring a straightforward way to securely log out of the platform.","Acceptance Criteria for ""Sign Out"" Option in Dropdown E2-F1-US2-T2:

1. Visibility: When a user clicks on the dropdown menu in the LMS, the ""Sign Out"" option should be clearly visible among the list of options.

2. Clickability: The ""Sign Out"" option should be clickable. Upon clicking, the user should be taken through the logout process.

3. Logout Action: Once the ""Sign Out"" option is clicked, the user should be successfully logged out of the LMS, ending their current session.

4. Confirmation: After selecting ""Sign Out"", the user should be redirected to a confirmation screen or receive a notification confirming they have been logged out.

5. Accessibility from Any Page: Regardless of where the user is within the LMS (e.g., dashboard, course page, profile), they should be able to access the dropdown and select the ""Sign Out"" option.

6. Security: The logout process should be secure, ensuring that once logged out, the user's session data is cleared and cannot be hijacked.

7. Re-login Requirement: After logging out, if the user wants to access the LMS again, they should be required to provide their login credentials.",
Product Backlog Item,,,3.FE-E4-F1-US3,,"3.FE-E4-F1-US3

""My Profile"" Page:

As a registered user of the platform, I want to access a ""My Profile"" page, so that I can view and edit my personal details and have the option to reset my password.","Acceptance Criteria for ""My Profile"" Page Functionality:

1. **Profile Access**: As a registered user, when I navigate to the ""My Profile"" page, I should be able to see my current personal details displayed.

2. **Detail Visibility**: All personal details, such as name, email, and profile picture, should be visible on the ""My Profile"" page.

3. **Edit Option**: There must be an option (e.g., an ""Edit"" button) that allows me to modify my personal details.

4. **Editable Fields**: Upon selecting the option to edit, I should be able to change fields such as my name, email, profile picture, and any other personal information provided during registration.

5. **Validation and Saving**: After editing, the system should validate the changed details and provide a ""Save"" option to confirm the updates.

6. **Password Reset**: The page must include a ""Reset Password"" option that allows me to initiate a password change.

7. **Reset Process**: Upon selecting ""Reset Password,"" I should receive clear instructions on how to proceed, whether via an emailed link or through security questions.

8. **Success Confirmation**: After editing details or resetting the password, I should receive a confirmation that the changes have been successfully made.

9. **Error Handling**: If there are issues with the information I enter or the process, I should be provided with clear error messages.

10. **Security**: Any changes to sensitive information like password should require re-authentication to ensure security.

11. **Usability**: The ""My Profile"" page should be easily navigable, and all features should be accessible without extensive searching.

12. **Consistency**: The layout and design of the ""My Profile"" page should be consistent with the overall design of the platform.

13. **Responsiveness**: The page should be responsive and function correctly across different devices and browsers.",
Task,,,,3.FE-E4-F1-US3-T1,"3.FE-E4-F1-US3-T1

View Personal Details on ""My Profile"" Page

As a registered user of the platform, I want to view my current profile name, email, and photo when I access the ""My Profile"" page, so that I can ensure my information is up-to-date and accurate.","Acceptance Criteria for ""View Personal Details on 'My Profile' Page"" E2-F1-US3-T1:

1. Access to ""My Profile"" Page: As a registered user, when I navigate to the platform, there should be a clear option or link to access the ""My Profile"" page.

2. Display of Profile Name: Upon accessing the ""My Profile"" page, my current profile name should be prominently displayed in a readable format.

3. Display of Email Address: My registered email address should be clearly visible on the ""My Profile"" page.

4. Display of Profile Photo: My current profile photo should be displayed on the ""My Profile"" page. The photo should be of a reasonable size and resolution, ensuring clarity.

5. Up-to-Date Information: The information displayed (name, email, and photo) should reflect the most recent details I've saved or updated on the platform.",
Task,,,,3.FE-E4-F1-US3-T2,"3.FE-E4-F1-US3-T2

Edit Profile Name

As a registered user of the platform, I want to have an option to edit my profile name on the ""My Profile"" page, so that I can update it as needed","Acceptance Criteria for ""Edit Profile Name"" on ""My Profile"" Page E2-F1-US3-T2:

1. Edit Option: When I navigate to the ""My Profile"" page, my profile name should become an editable text field where I can make changes.

2. Character Limit: The editable profile name field should have a reasonable character limit to ensure names aren't excessively long.

3. Special Characters: The system should either accept common special characters (like hyphens or apostrophes) or provide a clear message if such characters are not allowed.

4. Save Changes: After editing my profile name, there should be an option (like a ""Save"" button) to save the changes. If I navigate away without saving, the changes should not be applied.

5. Feedback on Save: Once I save the edited profile name, I should receive feedback (like a notification or message) confirming that my changes have been saved successfully.

6. Error Handling: If there's an issue with saving the edited name (e.g., system error, name already taken), I should receive a clear error message explaining the problem.

7. Revert Option: If I make changes to my profile name but decide not to save them, there should be an option to revert back to the original name before any edits were made.",
Task,,,,3.FE-E4-F1-US3-T3,"3.FE-E4-F1-US3-T3

Edit Email Address

As a registered user of the platform, I want to have an option to edit my email address on the ""My Profile"" page, so that I can ensure my contact information is current.","Acceptance Criteria for ""Edit Email Address"" on ""My Profile"" Page E2-F1-US3-T3:

1. Email Display: When I navigate to the ""My Profile"" page, my current email address should be clearly displayed.

2. Edit Option: My current email address should become an editable input field where I can type in a new email address.

3. Valid Format: The input field should validate that the entered email address is in a correct email format (e.g., user@example.com).

4. Unique Email Check: The platform should check that the new email address is not already associated with another account. If it is, an error message should be displayed.

5. Save Changes: After editing, there should be a ""Save"" or ""Confirm"" button to apply the changes.

6. Feedback on Save: After saving the new email address, I should receive feedback (like a notification or message) confirming that my email address has been updated successfully.

7. Error Handling: If there's an issue with saving the new email (e.g., server error, invalid format, email already in use), an appropriate error message should be displayed to inform me of the issue.

8. Revert Option: If I decide not to change my email after initiating the edit, there should be an option to revert or cancel the changes and keep my current email address.",
Task,,,,3.FE-E4-F1-US3-T4,"3.FE-E4-F1-US3-T4

Upload and Change Profile Photo

As a registered user of the platform, I want to have an option to upload a new photo or change my existing profile photo on the ""My Profile"" page, so that I can keep my profile picture updated","Acceptance Criteria for ""Upload and Change Profile Photo"" E2-F1-US3-T4:

1. Access to Upload Option: When I navigate to the ""My Profile"" page, I should see an option ""choose file"" button below my current profile photo.

2. File Selection: Upon clicking the choose file button, I should be able to browse and select a new photo from my device.

3. File Types: The platform should accept common image file types such as .jpg, .jpeg, .png, and .gif.

4. File Size Limit: There should be a defined maximum file size for the profile photo (e.g., 5MB) to ensure that large files don't affect platform performance.

5. Preview Before Save: After selecting a new photo, I should see a preview of how it will appear as my profile picture before I confirm the change.

6. Cropping Tool: If the selected photo doesn't fit the profile picture dimensions, I should have the option to crop the image to fit the designated space.

7. Save Changes: There should be a ""Save"" or ""Confirm"" button to apply the change. Once clicked, the new photo should replace the previoUSone as my profile picture.

8. Error Handling: If I try to upload an unsupported file type or a file that exceeds the size limit, I should receive a clear error message indicating the issue.

9. Feedback on Successful Update: After successfully updating the profile photo, I should receive feedback (like a notification or message) confirming that my profile picture has been updated.

10. Revert Option: If I change my mind after uploading but before saving, there should be an option to revert to the original photo.",
Task,,,,3.FE-E4-F1-US3-T5,"3.FE-E4-F1-US3-T5

Save Changes to Personal Details

As a registered user of the platform, I want a ""Save"" button on the ""My Profile"" page after making edits, so that I can ensure my changes are stored and reflected on my profile.","Acceptance Criteria for ""Save Changes to Personal Details"" E2-F1-US3-T5:

1. Button Visibility: After making any edits to personal details on the ""My Profile"" page, the ""Save"" button should be clearly visible and accessible to the user.

2. Button Functionality: Upon clicking the ""Save"" button, the system should store and apply all the changes made by the user to their profile.

3. Immediate Reflection: After saving, the updated details should immediately reflect on the ""My Profile"" page, showing the user their most recent changes.

4. Feedback Notification: After clicking the ""Save"" button, the user should receive a feedback notification (e.g., a pop-up message or a banner) confirming that the changes have been successfully saved.

5. Data Persistence: Once saved, the updated personal details should persist. This means that if the user logs out and logs back in or even if they access their profile after some days, the changes should still be present.

6. Error Handling: If there's an issue saving the changes (e.g., due to server issues or data conflicts), the user should be informed with a clear error message explaining the problem.

7. No Unintended Changes: Only the fields that the user has edited should be updated. All other personal details should remain unchanged.

8. Data Validation: Before saving, the system should validate the data. For instance, if the email format is incorrect, the user should be prompted to correct it before the changes can be saved.",
Task,,,,3.FE-E4-F1-US3-T6,"3.FE-E4-F1-US3-T6
Reset Password

As a registered user of the platform, I want a ""Reset Password"" button on the ""My Profile"" page, so that I can initiate the process to change my password if needed","Acceptance Criteria for ""Reset Password"" F: E2-F1-US3-T6:

1. Button Placement: On the ""My Profile"" page, below the ""Save"" button, there should be a clearly labeled ""Reset Password"" button.

2. Button Action: When the ""Reset Password"" button is clicked, the system should trigger an action to send a password reset link.

3. Email Delivery: The password reset link should be sent directly to the registered email address associated with the user's account.

4. Email Content: The email should clearly indicate its purpose, provide the reset link, and give brief instructions on how to use the link to reset the password.

5. Toast Message: Immediately after clicking the ""Reset Password"" button, a toast message (or a similar notification) should appear on the ""My Profile"" page.

6. Toast Message Content: The toast message should clearly confirm that the password reset link has been sent to the registered email address.

7. One-Time Use: The password reset link sent to the email should be valid for one-time use and should expire after a certain duration (e.g., 24 hours) if not used.

8. Security: The process of sending and using the reset link should be secure to prevent unauthorized password changes.",
Epic,3.FE-E5,,,,"3.FE-E5

Learner Dashboard",,
Feature,,3.FE-E5-F1,,,"3.FE-E5-F1

Comprehensive Learner's Course Overview on Kona LMS Dashboard

The ""Learner's Course Overview"" in Kona LMS optimizes user experience by presenting a succinct ""My Courses"" dashboard. Here, learners find individual course cards with essential details and direct access to educational content. Interactive elements, from live session participation to an AI-assisted help F, ensure a seamless and dynamic educational journey within a streamlined, intuitive interface.",,
Product Backlog Item,,,3.FE-E5-F1-US1,,"3.FE-E5-F1-US1

Learner's Course Overview on Kona LMS Dashboard

As a user of the Kona LMS platform, when I successfully log in as a learner, As a learner, I want to see:
1. A ""My Courses"" section displaying course cards for each course I'm enrolled in.
2. Each course card should show the course image, batch ID, timing, and trainer name.
3. I also want buttons on each card that allow me to either continue with recorded videos or attend live class sessions.","Acceptance Criteria for Learner's Course Overview on Kona LMS Dashboard: 3.FE-E5-F1-US1

1. **Visibility of ""My Courses"" Section**:
   - Ensure there is a ""My Courses"" section readily visible on the dashboard after a learner logs in.

2. **Course Card Display**:
   - Each enrolled course must be represented by a card within the ""My Courses"" section.
   - Confirm that each course card displays the following details:
     - Course image
     - Batch ID
     - Timing of the course
     - Trainer name

3. **Interaction with Course Cards**:
   - Each course card should include two interactive buttons:
     - A ""Continue Learning"" button that takes the learner to recorded video content.
     - A ""Join Live Session"" button that allows the learner to participate in live classes.
   
4. **Functional Buttons**:
   - Validate that the ""Continue Learning"" button redirects to the appropriate recorded session.
   - Ensure the ""Join Live Session"" button links to the correct live class environment.

5. **Layout and Design**:
   - The course cards should be laid out in a grid or list format that is easy to navigate.
   - The design of the cards should be consistent with the Kona LMS platform's branding and aesthetics.

6. **Responsive Design**:
   - Confirm that the ""My Courses"" section and its course cards are responsive and render correctly across different devices and screen sizes.

7. **Performance**:
   - The course cards should load promptly without significant lag to ensure a smooth user experience.

8. **Error Handling**:
   - In the event of a failure to load course cards, an informative error message should be displayed to the learner.",
Task,,,,3.FE-E5-F1-US1-T1,"3.FE-E5-F1-US1-T1

Display ""My Courses"" Section

As a learner, when I access the welcome page, I want to see a dedicated section labeled ""My Courses"" that showcases all the courses I'm enrolled in, so I can quickly access my learning materials.","Acceptance Criteria for Displaying ""My Courses"" Section E3-F1-US1-T1:

1. Visibility Upon Login:
   - Immediately after logging in as a learner, the welcome page should prominently display a section labeled ""My Courses"".

2. Dedicated Section:
   - The ""My Courses"" section should be distinct and separate from other sections on the welcome page.

3. List of Enrolled Courses:
   - Within the ""My Courses"" section, all courses that the learner is currently enrolled in should be listed.

4. No Courses Scenario:
   - If the learner is not enrolled in any courses, an appropriate message should be displayed, such as ""You are not enrolled in any courses yet.""

6. Easy Navigation:
   - Clicking on any course within the ""My Courses"" section should navigate the learner to that specific course's details or content.

7. Error Handling:
   - If there's an issue loading the ""My Courses"" section, an appropriate error message should be displayed to inform the learner of the problem.",
Task,,,,3.FE-E5-F1-US1-T2,"3.FE-E5-F1-US1-T2

Course Cards

As a learner, for each course I'm enrolled in, I want to see a visually appealing course card that provides a snapshot of the course details, so I can get a quick overview of the course details.""","Acceptance Criteria for Course Cards E3-F1-US1-T2:

1. Presence of Course Cards:
   - For each course the learner is enrolled in, there should be a distinct course card displayed.

2. Visually Appealing Design:
   - Each course card should have a design that is visually appealing, using consistent fonts, colors, and layout.

3. Course Image/Thumbnail:
   - Each course card should F an image or thumbnail that represents the course content or theme.

4. Course Title:
   - The title of the course should be prominently displayed on the card.

5. Brief Course Details:
   - A concise batch code, timing, trainer name to be displayed.

6. Consistency Across Cards:
   - All course cards should maintain a consistent design and layout to provide a uniform user experience.

7. Error Handling:
   - If there's an issue retrieving or displaying course details on the card, an appropriate placeholder or error message should be displayed.",
Task,,,,3.FE-E5-F1-US1-T3,"3.FE-E5-F1-US1-T3

Display Course Image on Course Card

As a learner, on each course card, I want to see a relevant course image, so I can visually identify the course content or theme.","Acceptance Criteria for Displaying Course Image on Course Card E3-F1-US1-T3:

1. Presence of Image:
   - Every course card should have a designated space or placeholder for displaying the course image.

2. Relevance to Course:
   - The displayed image should be relevant to the course content or theme, providing a visual representation of the course's subject matter.

3. Consistent Sizing:
   - All course images should be displayed in a consistent size and aspect ratio across all course cards to maintain uniformity.",
Task,,,,3.FE-E5-F1-US1-T4,"3.FE-E5-F1-US1-T4

Show Batch ID and Timing on Course Card

As a learner, on each course card, I want to see the batch ID and timing, so I can be informed about my batch details and schedule.","Acceptance Criteria for Displaying Batch ID and Timing on Course Card E3-F1-US1-T4:

1. Presence of Batch ID:
   - Each course card should clearly display the batch ID associated with the course the learner is enrolled in.

2. Clear Labeling:
   - The batch ID should be labeled as ""Batch ID"" or a similar clear identifier to ensure learners understand the information.

3. Presence of Timing:
   - Each course card should also display the timing for the course sessions, indicating when the course sessions are scheduled.

4. Consistency Across Cards:
   - The placement and presentation of the batch ID and timing should be consistent across all course cards to ensure a uniform user experience.

5. Up-to-Date Information:
   - The batch ID and timing displayed should always reflect the most current and updated information to ensure learners have accurate details.",
Task,,,,3.FE-E5-F1-US1-T5,"3.FE-E5-F1-US1-T5

Implement ""Continue"" Button on Course Card

As a learner, on each course card, I want to see a ""Continue"" button so that I can quickly navigate to the recorded videos of the course and pick up where I left off or review past content.","Acceptance Criteria for ""Continue"" Button on Course Card E2-US1-CS5:

1. Presence of Button:
   - Each course card should have a clearly visible ""Continue"" button.

2. Intuitive Design:
   - The ""Continue"" button should have an intuitive design, possibly with an icon (like a play or forward arrow) to indicate its purpose.

3. Positioning:
   - The ""Continue"" button should be consistently positioned on every course card to ensure a uniform user experience.

4. Navigation to Recorded Videos:
   - Clicking the ""Continue"" button should navigate the learner directly to the recorded videos section of the respective course.

5. Error Handling:
   - If there's an issue accessing the recorded videos after clicking the ""Continue"" button, an appropriate error message should be displayed to inform the learner of the problem.",
Task,,,,3.FE-E5-F1-US1-T6,"3.FE-E5-F1-US1-T6

Implement ""Live Class"" Button on Course Card

As a learner, on each course card, I want to see a ""Live Class"" button so that I can easily join live sessions for the course, ensuring real-time interaction and learning.","Acceptance Criteria for ""Live Class"" Button on Course Card E3-F1-US1-T6:

1. Presence of Button:
   - Each course card should clearly display a button labeled ""Live Class.""

2. Distinctive Design:
   - The ""Live Class"" button should be visually distinctive and easily identifiable among other elements on the course card.

3. Direct Navigation:
   - Clicking the ""Live Class"" button should directly navigate the learner to the live session of the course without unnecessary intermediate steps or pages.

4. Real-Time Interaction:
   - Upon joining the live session through the ""Live Class"" button, learners should be able to interact in real-time, including viewing the live video, hearing audio, and participating in chats or discussions.

5. Error Handling:
   - If there's an issue joining the live session or if the session isn't currently live, an appropriate error message or notification should be displayed to inform the learner.

6. Accessibility:
   - The ""Live Class"" button should be easily accessible and usable, considering factors like button size, contrast, and placement on the course card.

7. Up-to-Date Information:
   - If a live class session is ongoing or scheduled soon, the ""Live Class"" button should be active and clickable. If no live session is scheduled or ongoing, the button should either be grayed out or accompanied by relevant information indicating the next scheduled session.",
Product Backlog Item,,,3.FE-E5-F1-US2,,"3.FE-E5-F1-US2

Course Navigation via 'Continue' Button on Course Card

As a learner in the LMS, when I click the ""Continue"" button on a course card, I want to navigate to the respective course, access its topics, and view the associated videos for each topic.","Acceptance Criteria for User Story 3.FE-E5-F1-US2:

1. **Button Functionality**:
   - The ""Continue"" button must be clearly visible on each course card.
   - Upon clicking the ""Continue"" button, the system should navigate the user to the detailed course page.

2. **Course Access**:
   - The learner should be taken directly to the part of the course where they left off, or to the beginning if it's their first time.

3. **Content Interaction**:
   - On the course page, all topics associated with the course should be accessible.
   - The user should be able to view all available videos related to each topic without any access issues.

4. **State Preservation**:
   - The system should remember the user's progress and save the last watched video or topic.

5. **Navigation Consistency**:
   - This navigation process should be consistent across all courses available on the LMS.

6. **Error Handling**:
   - If the course content fails to load, an appropriate error message should be displayed.
   - In the event of a network issue, the system should attempt to reconnect and inform the user of the issue with the option to retry.

7. **Performance**:
   - Course navigation via the ""Continue"" button should occur with minimal delay, ensuring a seamless user experience.

8. **Accessibility**:
   - The ""Continue"" button and course navigation features must be accessible to users with disabilities, complying with WCAG 2.1 guidelines.",
Task,,,,3.FE-E5-F1-US2-T1,"3.FE-E5-F1-US2-T1

Navigate to Respective Course

As a learner, when I click the ""Continue"" button on a course card, I want to be taken directly to the main page of the respective course, ensuring I can quickly access its content.","Acceptance Criteria for Navigating to Respective Course E3-F1-US2-T1:

1. Clickable ""Continue"" Button:
   - Each course card should have a clearly visible and clickable ""Continue"" button.

2. Direct Navigation:
   - Clicking the ""Continue"" button should directly navigate the learner to the main page of the respective course without any unnecessary redirects or intermediate pages.

3. Course Main Page Content:
   - The main page of the course should display relevant course content, including Batch Code and Timings, Topics Accordion with videos list, placeholder text of ""Select a topic to start watching"" in the video player place, and other pertinent details.

4. Error Handling:
   - If there's an issue navigating to the course page, an appropriate error message should be displayed to inform the learner of the problem.

5. Consistent Behavior:
   - The behavior of the ""Continue"" button should be consistent across all course cards, ensuring a uniform user experience.",
Task,,,,3.FE-E5-F1-US2-T2,"3.FE-E5-F1-US2-T2

Display Course Topics

As a learner, once I'm on the course page, I want to see a list or overview of all the topics covered in the course, so I can understand the course structure and decide which topic to delve into.","Acceptance Criteria for Displaying Course Topics E3-US2-CS2:

1. Presence of Topics List:
   - Upon accessing the course page, there should be a clear and organized list or overview of all the topics covered in the course.

2. Logical Order:
   - Topics should be presented in a logical order, typically following the sequence in which they are taught or are meant to be accessed.

3. Clear Topic Titles:
   - Each topic should have a clear and descriptive title of what the topic covers.

4. Interactive Elements:
   - Topics should be clickable or interactive, allowing learners to select and delve into any topic of their choice.

5. Error Handling:
   - If there's an issue retrieving or displaying the topics, an appropriate error message or placeholder should be displayed to inform the learner.

10. Consistency Across Courses:
   - The presentation and layout of topics should be consistent across all courses on the LMS platform, providing a uniform user experience.",
Task,,,,3.FE-E5-F1-US2-T3,"3.FE-E5-F1-US2-T3

Implement Course Accordion

As a learner, I want the course topics to be presented in an accordion-style format, allowing me to expand and collapse each topic, ensuring a clean and organized view of the course content.","Acceptance Criteria for Implementing Course Accordion E3-F1-US2-T3:

1. Accordion Layout:
   - Course topics should be displayed in a vertical list, with each topic represented as a collapsible/expandable section.

2. Expand/Collapse Functionality:
   - Clicking on a course topic should expand its content, revealing the details or subtopics underneath.
   - Clicking again on the same topic should collapse its content, hiding the details or subtopics.

3. Default State:
   - Initially, all topics should be in a collapsed state, providing a high-level overview of the course content.

4. Indicators:
   - There should be clear visual indicators (like arrows or plus/minUSicons) showing whether a topic is expanded or collapsed.

6. Content Display:
   - Expanded sections should clearly display the content associated with the topic, such as subtopics, descriptions, or links to resources.

7. No Overlap:
   - Expanding one topic should not cause any overlap or disruption to adjacent topics in the accordion.

8. Error Handling:
   - If there's an issue loading content within an expanded section, an appropriate error message or placeholder should be displayed.",
Task,,,,3.FE-E5-F1-US2-T4,"3.FE-E5-F1-US2-T4

Access Videos for Each Class

As a learner, when I expand a topic in the course accordion, I want to see a list of associated videos for that class, so I can select and view them as per my learning pace and preference.","Acceptance Criteria for Accessing Videos for Each Class E3-F1-US2-T4:

1. Presence of Course Accordion:
   - The course page should F an accordion-style layout, where each topic or class can be expanded or collapsed.

2. Expandable Topics:
   - Each topic in the accordion should be expandable, revealing additional content or details when clicked.

3. List of Videos:
   - Upon expanding a topic or class, the learner should see a list of videos associated with that specific class.

5. Video Titles:
   - Every video should have a clear and descriptive title, helping learners understand the content or focUSof the video.

6. Interactive Video List:
   - Videos in the list should be clickable. Clicking on a video should start its playback within the LMS platform.

7. Smooth Playback:
   - Videos should play seamlessly without buffering issues, ensuring a smooth learning experience for the learner.

8. Video Controls:
   - The video player should provide standard controls such as play, pause, volume control, and fullscreen option.

9. Error Handling:
   - If there's an issue retrieving or playing a video, an appropriate error message should be displayed to inform the learner of the problem.",
Task,,,,3.FE-E5-F1-US2-T5,"3.FE-E5-F1-US2-T5

Play Video Content

As a learner, when I click on a video from the list, I want the video to play seamlessly within the LMS platform, ensuring a smooth learning experience without external redirects or interruptions.","
Acceptance Criteria for Playing Video Content E3-F1-US2-T5:

1. Immediate Video Playback:
   - Upon clicking on a video from the list, the video should start playing immediately without any significant delay.

2. In-Platform Playback:
   - The video should play directly within the LMS platform, without redirecting the learner to external sites or platforms.

3. Video Controls:
   - The video player should provide standard controls, including play, pause, volume control, and a progress bar.

4. Video Quality Options:
   - The video player should offer options for changing video quality (e.g., 480p, 720p, 1080p) to accommodate different internet speeds and preferences.

5. Fullscreen Option:
   - Learners should have the option to view the video in fullscreen mode for an immersive experience.

6. No Interruptions:
   - The video playback should be smooth, without frequent buffering or interruptions, given a stable internet connection.

7. Error Handling:
   - If there's an issue with video playback (e.g., video not available, format not supported), an appropriate error message should be displayed to inform the learner.

8. Resume Playback:
   - If a learner pauses or stops a video and returns later, the LMS should remember the last watched position and offer the option to resume from that point.",
Product Backlog Item,,,3.FE-E5-F1-US3,,"3.FE-E5-F1-US3

Navigation Links on Course Topics Page

As a learner accessing the LMS, when I view the course topics page, I expect to see a horizontal list of links below the course topics accordion that includes options for ""Course Info"", ""Resources"", ""Projects"", ""Resume"", and ""Ask AI"" Fs.","Acceptance Criteria for User Story FE-E5-F1-US3:

1. **Navigation Link Visibility**:
   - Ensure a horizontal list of navigation links is visibly displayed below the course topics accordion on the course topics page.

2. **Link Inclusion**:
   - Confirm the list includes the following options: ""Course Info"", ""Resources"", ""Projects"", ""Resume"", and ""Ask AI"".

3. **Functional Links**:
   - Each navigation link must be clickable and direct the user to the respective section or feature without errors.

4. **Responsive Layout**:
   - The horizontal list must adapt to varying screen sizes and maintain its horizontal layout without obscuring any links.

5. **Accessibility**:
   - Links should be accessible via keyboard navigation and screen readers, following WCAG 2.1 guidelines.

6. **Visual Hierarchy**:
   - The links must be styled in a way that is consistent with the LMS's design system, with clear differentiation from other elements on the course topics page.

7. **Active State Indicator**:
   - The link corresponding to the page or section the user is currently viewing should be highlighted or otherwise marked as active.

8. **Load Performance**:
   - The navigation links should load promptly with the course topics page, without causing any noticeable delay.

9. **Error Handling**:
   - In the event a link is broken or leads to an error page, a friendly and informative error message should be displayed to the user, offering to redirect back to the course topics page.",
Task,,,,3.FE-E5-F1-US3-T1,"3.FE-E5-F1-US3-T1

Display ""Resources"" Link

As a learner, on the course topics page, I want to see a link labeled ""Resources"" in the horizontal list, so I can access supplementary materials, readings, and references related to the course.","Acceptance Criteria for Displaying ""Course Info"" Link E3-F1-US3-T1:

1. Presence of Link:
   - The course topics page should clearly display a link labeled ""Course Info"" in the designated horizontal list.

2. Positioning:
   - The ""Course Info"" link should be easily visible and accessible, positioned appropriately within the horizontal list of options.

3. Clickable Link:
   - The ""Course Info"" link should be clickable, allowing learners to interact with it.

4. Navigation to Course Details:
   - Upon clicking the ""Course Info"" link, learners should be taken to the dedicated section that provides detailed information about the course that includes Name, Description, Modules, and a Live Class link.

5. Live Class:
    - The Live Class link should open live Zoom Call of the class.

6. Error Handling:
   - If there's an issue retrieving or displaying the course information, an appropriate error message or placeholder should be shown to the learner.",
Task,,,,3.FE-E5-F1-US3-T2,"3.FE-E5-F1-US3-T2

Display ""Resources"" Link

As a learner, on the course topics page, I want to see a link labeled ""Resources"" in the horizontal list, so I can access supplementary materials, readings, and references related to the course.","Acceptance Criteria for Displaying ""Resources"" Link E3-F1-US3-T2:

1. Presence of ""Resources"" Link:
   - The course topics page should clearly display a link labeled ""Resources"" in the designated horizontal list.

2. Positioning:
   - The ""Resources"" link should be positioned in a manner that is easily visible and accessible to the learner, ensuring a consistent layout with other links in the horizontal list.

3. Clickable Link:
   - The ""Resources"" link should be clickable, allowing learners to navigate to the resources section.

4. Content Access:
   - Upon clicking the ""Resources"" link, learners should be taken to a dedicated page or section that houses all supplementary materials, readings, and references for the course.

5. Relevant Content:
   - All materials and references in the ""Resources"" section should be relevant to the course and provide added value to the learner's experience.

6. Download Options:
   - If applicable, learners should have the option to download or save certain resources for offline access.

7. Error Handling:
   - If there's an issue accessing the resources (e.g., broken link, missing file), an appropriate error message should be displayed to inform the learner.",
Task,,,,3.FE-E5-F1-US3-T3,"3.FE-E5-F1-US3-T3

Display ""Projects"" Link

As a learner, on the course topics page, I want to see a link labeled ""Projects"" in the horizontal list, so I can view, submit, or track the statUSof any projects or assignments associated with the course.","Acceptance Criteria for Displaying ""Projects"" Link E3-US3-CS3:

1. Presence of ""Projects"" Link:
   - The course topics page should clearly display a link labeled ""Projects"" in the designated horizontal list.

2. Correct Positioning:
   - The ""Projects"" link should be positioned in the horizontal list as described, ensuring consistency and easy navigation for learners.

3. Clickable Link:
   - The ""Projects"" link should be interactive and clickable, directing learners to the appropriate projects or assignments page when clicked.

4. Display of Associated Projects:
   - Upon clicking the ""Projects"" link, learners should be presented with a list or overview of all projects or assignments associated with the course.

5. Submission Fs:
   - The projects page should provide options or Fs for learners to submit their projects or assignments, if applicable.

6. Error Handling:
   - If there's an issue retrieving or displaying the projects, an appropriate error message should be displayed to inform the learner.",
Task,,,,3.FE-E5-F1-US3-T4,"3.FE-E5-F1-US3-T4

Display ""Resume"" Link

As a learner, on the course topics page, I want to see a link labeled ""Resume"" in the horizontal list, so I can quickly continue from where I left off in the course, ensuring a seamless learning experience.","Acceptance Criteria for Displaying ""Resume"" Link E3-F1-US3-T4:

1. Presence of Link:
   - The ""Resume"" link should be clearly visible in the horizontal list on the course topics page.

2. Clear Labeling:
   - The link should be labeled as ""Resume"" or a similar clear identifier to ensure learners understand its purpose.

3. Positioning:
   - The ""Resume"" link should be positioned in a manner that is easily accessible and consistent with the design of the other links in the horizontal list.

4. Functionality:
   - Upon clicking the ""Resume"" link, the learner should be able to upload their resume.",
Task,,,,3.FE-E5-F1-US3-T5,"3.FE-E5-F1-US3-T5

Display ""Ask AI"" F Link

As a learner, on the course topics page, I want to see a link labeled ""Ask AI"" in the horizontal list, so I can access an AI-powered F to ask questions or get clarifications related to the course content.","Acceptance Criteria for Displaying ""Ask AI"" F Link E3-F1-US3-T5:

1. Presence of ""Ask AI"" Link:
   - The course topics page should clearly display a link labeled ""Ask AI"" in the designated horizontal list.

2. Positioning:
   - The ""Ask AI"" link should be easily visible and accessible, positioned consistently with other links in the horizontal list.

3. Clear Labeling:
   - The link should be clearly labeled as ""Ask AI"" to ensure users understand its purpose.

4. Interactive Link:
   - The ""Ask AI"" link should be clickable and lead the learner to the AI-powered F.

5. AI-Powered F:
   - Upon clicking the link, the learner should be presented with an interface where they can type in or voice out questions related to the course content.

6. Prompt Responses:
   - The AI F should provide prompt and relevant responses to the learner's questions.

7. Error Handling:
   - If the AI is unable to understand or answer a question, it should provide a polite message indicating its limitations and possibly suggest alternative resources.

8. User-Friendly Interface:
   - The AI interface should be user-friendly, with clear instructions on how to ask questions and navigate the F.",
Epic,3.FE-E6,,,,"3.FE-E6

Admin    Dashboard",,
Feature,,3.FE-E6-F1,,,"3.FE-E6-F1

Comprehensive Courses Management via Admin Portal

In this enhanced F, the admin portal centralizes course management in the LMS, offering streamlined controls for course modifications, student enrollment, and content organization. Admins can efficiently search courses, update course details, manage educational content, and oversee student participation, all from one intuitive interface. This consolidation optimizes administrative workflows, improving system efficacy and user navigation.",,
Product Backlog Item,,,3.FE-E6-F1-US1,,"3.FE-E6-F1-US1

""Navigate to Courses Management Page via Admin Portal""

As an admin, after logging into the LMS and accessing the welcome page, when I click on the ""Admin Portal"", I expect to be navigated to the courses management page.","Acceptance Criteria for User Story FE-E6-F1-US1: ""Navigate to Courses Management Page via Admin Portal""

1. **Successful Admin Login Confirmation**:
   - Ensure that after an admin logs into the LMS, they land on the welcome page as a confirmation of successful login.

2. **Admin Portal Access**:
   - Verify that an ""Admin Portal"" link or button is clearly visible and accessible on the welcome page.

3. **Navigation to Courses Management**:
   - Confirm that clicking on the ""Admin Portal"" link/button redirects the admin to the courses management page without errors.

4. **Page Layout and Content Validation**:
   - Check that the courses management page includes all necessary sections such as course lists, creation tools, and management options.

5. **Link Functionality and Responsiveness**:
   - The transition from the welcome page to the courses management page should be smooth and responsive without undue delay.

6. **User Feedback on Action**:
   - There should be a visual indicator (like a loading icon or text) when the admin clicks the ""Admin Portal"" link/button, indicating the navigation process is underway.

7. **Error Handling**:
   - In case of navigation failure, an appropriate error message should be displayed, guiding the admin on how to proceed or report the issue.

8. **Security and Permissions Check**:
   - Ensure that only users with admin privileges can view and access the ""Admin Portal"" link/button and navigate to the courses management page.

9. **Consistent Access Across Sessions**:
   - Validate that the ability for the admin to navigate to the courses management page via the ""Admin Portal"" is consistent across different login sessions.

10. **Cross-Platform and Browser Testing**:
    - Confirm that navigation to the courses management page through the ""Admin Portal"" works across different browsers and devices that the LMS supports.",
Task,,,,3.FE-E6-F1-US1-T1,"3.FE-E6-F1-US1-T1

Navigation to Courses Management Page

As an admin, when I click on the ""Admin Portal"", I want to be directly navigated to the courses and users management page.","Acceptance Criteria for Navigating to Courses Management Page E4-F1-US1-T1:

1. Visibility of ""Admin Portal"" Link:
   - The ""Admin Portal"" link should be clearly visible and distinguishable on the welcome page to ensure easy navigation for the admin. It should be clickable.

2. Direct Navigation to Courses Management Page:
   - Clicking on the ""Admin Portal"" link should directly navigate the admin to the courses management page without unnecessary redirects or additional clicks.

3. Uninterrupted Access for Authenticated Admin:
   - Authenticated admins should be able to click on the ""Admin Portal"" link and navigate to the courses management page without encountering additional authentication prompts.

4. Error Handling and Messaging:
   - In case of navigation issues or errors, a relevant error message should be displayed, providing options to retry the action or contact technical support for assistance.",
Task,,,,3.FE-E6-F1-US1-T2,"3.FE-E6-F1-US1-T2

Admin Management Page View Courses Link

As an admin, when I navigate to the courses management page, I want to view a Courses link","Acceptance Criteria for Admin Management Page View Courses Link E4-F1-US1-T2:

1. Visibility of Courses Link:
   - The ""Courses"" link should be clearly visible on the courses management page to ensure easy navigation for the admin.

2. Accessibility of Courses Link:
   - The ""Courses"" link should be easily accessible and not hidden within other elements or menUSon the courses management page.

3. Interactivity of Courses Link:
   - The cursor should change to a pointer when hovering over the ""Courses"" link, indicating that it is interactive and clickable.",
Task,,,,3.FE-E6-F1-US1-T3," 3.FE-E6-F1-US1-T3
  
Admin Management Page View Add Button

As an admin, when I navigate to the courses management page, I want to view an Add button beside the Courses link","Acceptance Criteria for Viewing Add Button on Courses Management Page E4-F1-US1-T3:

1. Visibility of Add Button:
   - The Add button should be clearly visible and located beside the Courses link on the courses management page.

2. Labeling and Iconography:
   - The Add button should be labeled as ""Add"" or have a universally recognized ""plus"" icon to indicate the addition of a new item.

3. Positioning Consistency:
   - The Add button should consistently be positioned in the same location relative to the Courses link, regardless of screen size or device.

4. Error Handling:
   - If there is an issue with the functionality of the Add button, a relevant error message should be displayed to inform the admin about the issue and suggest possible next steps.",
Task,,,,3.FE-E6-F1-US1-T4,"3.FE-E6-F1-US1-T4

Admin Management Page View Users Link

As an admin, when I navigate to the courses management page, I want to view a Users link beneath the Courses link","Acceptance Criteria for Admin Management Page View Users Link E4-F1-US1-T4:

1. Positioning of Users Link:
   - The ""Users"" link should be positioned visibly beneath the ""Courses"" link to maintain a structured and intuitive navigation hierarchy.

3. Labeling and Clarity:
   - The ""Users"" link should be labeled clearly and concisely to ensure that the admin understands that it leads to user management or a list of users.

4. Clickable Users Link:
   - The ""Users"" link should be interactive, changing the cursor to a pointer on hover to indicate clickability.",
Task,,,,3.FE-E6-F1-US1-T5,"3.FE-E6-F1-US1-T5

Admin Management Page View Search box

As an admin, when I navigate to the courses management page, I want to view a Search Box beside the Add button","Acceptance Criteria for Admin Management Page View Search Box E4-F1-US1-T5:

1. Visibility of Search Box:
   - The Search Box should be clearly visible on the courses management page when an admin navigates to it.

2. Location of Search Box:
   - The Search Box should be located beside the ""Add"" button to ensure a streamlined and intuitive user interface.

3. Placeholder Text in Search Box:
   - The Search Box should contain placeholder text, such as ""Search for a course,"" to guide admins in utilizing the search functionality.",
Task,,,,3.FE-E6-F1-US1-T6,"3.FE-E6-F1-US1-T6

Admin Management Page View Courses List

As an admin, when I navigate to the courses management page, I want to view the entire courses list beneath the Search box","Acceptance Criteria for Admin Management Page View Courses List E4-F1-US1-T6:

1. Visibility of Courses List:
   - Upon navigating to the courses management page, the admin should immediately see a list of all available courses displayed beneath the search box.

2. Course Information Display:
   - Each course name should display relevant information such as course ID, batch number, and timing.

3. Scrollability:
   - If the courses list is extensive, the admin should be able to scroll through the list to view all available courses without hindrance.

8. Handling of No Courses:
   - If no courses are available or the list is empty, a friendly message (e.g., ""No courses available."") should be displayed to inform the admin.

9. Refresh or Reload Option:
    - The admin should have an option to refresh or reload the courses list to ensure they are viewing the most up-to-date information.

12. Error Handling:
    - In case of an error while retrieving the courses list, a relevant error message should be displayed, providing options to retry or contact technical support.",
Product Backlog Item,,,3.FE-E6-F1-US2,,"3.FE-E6-F1-US2

Courses Management

As an admin, I want to have a comprehensive course management system in the Admin Portal, So that I can efficiently manage courses offerings, details, instructors, and enrollments.","Acceptance Criteria for User Story 3.FE-E6-F1-US2: Courses Management System

1. **Course Offerings Management**:
   - Admins must be able to add, update, and remove course offerings.
   - Each course entry should include fields for the course name, description, duration, and associated costs.

2. **Course Details Handling**:
   - The system should allow admins to detail course prerequisites, learning objectives, and any special requirements.

3. **Instructor Assignment**:
   - Admins must be able to assign instructors to courses, with functionality to search for and select instructors from a database.

4. **Enrollment Oversight**:
   - The system should provide a feature to monitor and manage student enrollments, including waitlists and maximum class sizes.

5. **Batch Operations**:
   - The admin should have the capability to perform batch operations for course assignments and enrollments.

6. **Reporting Features**:
   - Generate reports on course popularity, enrollment statistics, and instructor performance.

7. **User Interface**:
   - The course management interface should be user-friendly, with a clear layout and intuitive navigation.

8. **Data Validation and Error Handling**:
   - Appropriate validations must ensure data integrity for all course management actions with clear error messages for any discrepancies.

9. **Performance and Scalability**:
   - The system should be tested to handle a large number of courses and users without performance degradation.

10. **Security and Permissions**:
    - Proper access control must be in place to ensure only authorized admins can manage course information.

11. **Integration with Existing Systems**:
    - The course management system should integrate seamlessly with the existing Admin Portal and its database.

12. **Compliance with Standards**:
    - Ensure that the management system complies with educational standards and regulations. ",
Task,,,,3.FE-E6-F1-US2-T1,"3.FE-E6-F1-US2-T1

Course Add Button

As an admin, when I click the Add button, I want to see a Create Course section where I can add the title, Description, and upload a picture, and a create button to create the course","Acceptance Criteria for Displaying the 'Add' Button in Course Management E4-F1-US2-T1:

1. Visibility of 'Add' Button:
   - The 'Add' button should be clearly visible on the courses management page to ensure that the admin can easily find it.

2. Positioning of 'Add' Button:
   - The 'Add' button should be positioned in a logical and intuitive location on the courses management page, such as near the top of the courses list or in the header, to facilitate easy navigation.

3. Labeling of 'Add' Button:
   - The 'Add' button should be labeled with clear and concise text (e.g., ""Add Course"" or ""+ Add"") to indicate its functionality to the admin.

4. Interactivity Indicator:
   - When hovering over the 'Add' button, the cursor should change to a pointer to indicate that the button is interactive and clickable.",
Task,,,,3.FE-E6-F1-US2-T2,"3.FE-E6-F1-US2-T2

Create Course Title field

As an admin, when I click on the Add button, the create course section should have an input field for entering the Title","
Acceptance Criteria for Display of Course Title Field in Create Course Section E4-F1-US2-T2:


1. Display of Create Course Section:
   - Upon clicking the Add button, the create course section should be displayed to the admin, providing a space to input new course details.

2. Presence of Course Title Input Field:
   - The create course section should contain an input field specifically for entering the course Title, ensuring admins can define the name of the new course.

3. Labeling of Course Title Input Field:
   - The course Title input field should be clearly labeled as ""Title"" or a similar identifier to guide admins on the intended data entry.

4. Placeholder Text in Input Field:
   - The course Title input field should contain placeholder text (e.g., ""Enter course title here"") to provide additional guidance and maintain a user-friendly interface.

5. FocUSon Input Field:
   - When the create course section is displayed, the focUSshould automatically be set to the course Title input field, enabling admins to start typing immediately.

6. Visibility of Input Field:
   - The course Title input field should be sufficiently visible, ensuring that the text entered is easily readable and does not feel cramped.

7. Error Handling:
   - If there are issues with displaying the create course section or course Title input field, relevant error messages should be displayed, providing options to retry the action or contact technical support.",
Task,,,,3.FE-E6-F1-US2-T3,"3.FE-E6-F1-US2-T3

Create Course Description field

As an admin, when I click on the Add button, the create course section should have a text area field below the title input field for giving the description of the course to be added","Here is the text with the asterisks and hash removed:

Acceptance Criteria for Creating Course Description Field E4-F1-US2-T3:

1. Positioning of Description Text Area:
   - A text area field for entering the course description should be present directly below the title input field.

2. Labeling of Description Text Area:
   - The description text area should be clearly labeled as ""Description"" or similar to guide admins on the intended input.

3. Placeholder Text in Description Text Area:
   - Placeholder text (e.g., ""Enter course description here..."") should be present in the description text area to provide additional guidance.

4. Input Capability in Description Text Area:
   - The admin should be able to input text into the description text area without any unexpected restrictions on character count or formatting.

5. Multiline Input for Description:
   - The description text area should allow multiline input to facilitate detailed and formatted descriptions.

6. Error Handling for Description Input:
   - If there are issues or requirements for the description input (e.g., character limit, mandatory field), relevant error messages should be displayed to guide the admin.",
Task,,,,3.FE-E6-F1-US2-T4,"3.FE-E6-F1-US2-T4

Create Course Choose File Button option for course picture upload

As an admin, when I click on the Add button, the create course section should have a Choose File button beneath the text area field to upload a picture for the course to be created","Acceptance Criteria for Create Course Choose File Button Option E4-F1-US2-T4:

1. Visibility of Choose File Button:
   - Beneath the text area field, a Choose File button should be visibly present to facilitate the upload of a course picture.

2. Clear Labeling:
   - The Choose File button should be labeled clearly, and additional information (e.g., accepted file types, max file size) should be provided to guide the admin during the image upload process.",
Task,,,,3.FE-E6-F1-US2-T5,"3.FE-E6-F1-US2-T5

Create Button

As an admin, when I click the Add button, I want to see a Create button in the Create Course section below the Choose File Button, on clicking the Create Button, I must be able to save the course created.","
Acceptance Criteria for ""Create Button"" Product Backlog Item E4-F1-US2-T5:

1. Visibility of Create Button:
   - Given I am an admin,
   - When I click the ""Add"" button,
   - Then I should see a ""Create"" button in the ""Create Course"" section below the ""Choose File"" button.

2. Functionality of Create Button:
   - Given the ""Create"" button is visible,
   - When I click the ""Create"" button,
   - Then the course information should be saved.

3. Confirmation of Course Creation:
   - Given I have clicked the ""Create"" button,
   - Then I should receive a confirmation that the course has been successfully created.

4. Visibility After Course Creation:
   - Given the course has been successfully created,
   - Then I should be able to view the created course in the relevant course list or section.

5. Error Handling:
   - Given I am in the ""Create Course"" section,
   - When there is an error in course creation (e.g., missing required information),
   - Then I should receive a clear error message indicating the issue.

6. Validation of Course Information:
   - Given I have entered course information,
   - When I attempt to create the course,
   - Then the system should validate that all required fields are filled and formatted correctly before saving.

7. Data Integrity:
   - Given the course has been created,
   - When I view the course details,
   - Then all the information should be saved accurately as entered during creation.",
Product Backlog Item,,,3.FE-E6-F1-US3,,"3.FE-E6-F1-US3

Efficient Course Searching for Enhanced User Experience

As an admin, I want to use a course search field on the courses management page,
So that I can efficiently find and navigate to specific courses based on keywords or phrases.","Acceptance Criteria for Course Search Functionality: 3.FE-E6-F1-US3

1. **Search Field Presence**: The course management page must feature a prominently placed search field specifically for course searching.

2. **Keyword and Phrase Search**: The search functionality should allow the admin to input keywords or phrases relevant to course titles or content.

3. **Real-time Results**: As the admin types, the system should display matching courses in real-time, with results updating as additional characters are entered.

4. **Search Efficiency**: The search should be quick and efficient, returning relevant courses without significant delay.

5. **Navigation from Results**: The admin should be able to navigate directly to a course's details or management page by clicking on a course in the search results.

6. **No Results Handling**: If no courses match the search criteria, display a clear message indicating no results found and suggest checking for typos or trying different keywords.

7. **Accessible from Any Page**: The search field should be accessible from any page within the course management section to ensure efficient navigation.",
Product Backlog Item,,,3.FE-E6-F1-US4,,"3.FE-E6-F1-US4

Display Modify Courses Section

As an admin, after selecting a course from the list, I expect a horizontal menu with links for ""Course Info"" (to manage course details and live links), ""Modules"" (to add or remove modules and videos), ""Projects"" (to upload projects), ""Resources"" (to add resources), ""Enrolled"" (to view, enroll, or unenroll learners), and ""Resume"" (to upload resumes).","Acceptance Criteria for User Story FE-E6-F1-US4: Display Modify Courses Section

1. **Course Selection**: Ensure that when an admin selects a course from the course list, it triggers the display of a modification section.

2. **Menu Visibility**: A horizontal menu should be prominently displayed at the top of the modification section, immediately after course selection.

3. **Menu Links**: The menu must contain links for the following:
   - ""Course Info"": Allows admin to manage course details and update live links.
   - ""Modules"": Enables adding or removing modules and videos.
   - ""Projects"": Provides the functionality to upload project details or files.
   - ""Resources"": Facilitates the addition of various resources related to the course.
   - ""Enrolled"": Presents a view to manage learner enrollment, including the ability to enroll new learners or unenroll existing ones.
   - ""Resume"": Offers an option to upload and manage resumes.

4. **Link Functionality**: Each menu link should lead to the respective section with relevant functionalities smoothly and without errors.

5. **User Interface**: The modification section and its menu links should align with the platform's UI/UX standards, ensuring a consistent and intuitive admin experience.

6. **Responsive Design**: The horizontal menu and all its links should be fully functional and aesthetically pleasing across devices of various sizes and resolutions.

7. **Accessibility**: The modification section should be accessible, adhering to WCAG guidelines, ensuring that admin users with disabilities can navigate and manage courses effectively.

8. **Data Integration**: All sections must accurately display current course data, and any changes made by the admin should be correctly updated in the system in real-time.

9. **Confirmation Messages**: Provide clear confirmation messages or visual cues after any modification is successfully saved.
",
Task,,,,3.FE-E6-F1-US4-T1,"3.FE-E6-F1-US4-T1

Display Courses Info link

As an admin, after selecting a course from the list, I expect a horizontal menu with the link for ""Course Info"" (to manage course details and live links) to be displayed ","Acceptance Criteria for Product Backlog Item: Display Courses Info Link E4-F1-US4-T1:

1. Visibility:
   - Upon selecting a course, a horizontal menu becomes visible.
   - The ""Course Info"" link is prominently displayed within this horizontal menu.

2. Interactivity:
   - The link is clickable and provides visual feedback upon hover and click actions (e.g., color change, underline).

3. Error Handling:
   - In case of an error or failure to load the link, appropriate error messages or fallback options are displayed to the admin.",
Task,,,,3.FE-E6-F1-US4-T2,"3.FE-E6-F1-US4-T2

Display Courses Modules

As an admin, after selecting a course from the list, I expect a horizontal menu with the link for ""Modules"" (to add or remove modules and videos) to be displayed ","Acceptance Criteria for Product Backlog Item: Display Courses Info Link E4-F1-US4-T2:

1. Visibility:
   - Upon selecting a course, a horizontal menu becomes visible.
   - The ""Modules"" link is prominently displayed within this horizontal menu.

2. Interactivity:
   - The link is clickable and provides visual feedback upon hover and click actions (e.g., color change, underline).

3. Error Handling:
   - In case of an error or failure to load the link, appropriate error messages or fallback options are displayed to the admin.",
Task,,,,3.FE-E6-F1-US4-T3,"3.FE-E6-F1-US4-T3

Display Courses Projects

As an admin, after selecting a course from the list, I expect a horizontal menu with the link for ""Projects"" (to upload projects) to be displayed ","Certainly, here is the text with the asterisks and hash removed:

Acceptance Criteria for Product Backlog Item: Display Courses Info Link E4-F1-US4-T3:

1. Visibility:
   - Upon selecting a course, a horizontal menu becomes visible.
   - The ""Projects"" link is prominently displayed within this horizontal menu.

2. Interactivity:
   - The link is clickable and provides visual feedback upon hover and click actions (e.g., color change, underline).

3. Error Handling:
   - In case of an error or failure to load the link, appropriate error messages or fallback options are displayed to the admin.",
Task,,,,3.FE-E6-F1-US4-T4,"3.FE-E6-F1-US4-T4

Display Courses Resources

As an admin, after selecting a course from the list, I expect a horizontal menu with the link for ""Enrolled"" (to enroll or unenroll learners) to be displayed ","Acceptance Criteria for Product Backlog Item: Display Courses Info Link E4-F1-US4-T4:

1. Visibility:
   - Upon selecting a course, a horizontal menu becomes visible.
   - The ""Enrolled"" link is prominently displayed within this horizontal menu.

2. Interactivity:
   - The link is clickable and provides visual feedback upon hover and click actions (e.g., color change, underline).

3. Error Handling:
   - In case of an error or failure to load the link, appropriate error messages or fallback options are displayed to the admin.",
Task,,,,3.FE-E6-F1-US4-T5,"3.FE-E6-F1-US4-T5

Display Courses Resume

As an admin, after selecting a course from the list, I expect a horizontal menu with the link for ""Resume"" (to upload resumes) to be displayed ","Acceptance Criteria for Product Backlog Item: Display Courses Info Link E4-F1-US4-T5:

1. Visibility:
   - Upon selecting a course, a horizontal menu becomes visible.
   - The ""Resume"" link is prominently displayed within this horizontal menu.

2. Interactivity:
   - The link is clickable and provides visual feedback upon hover and click actions (e.g., color change, underline).

3. Error Handling:
   - In case of an error or failure to load the link, appropriate error messages or fallback options are displayed to the admin.",
Product Backlog Item,,,3.FE-E6-F1-US5,,"3.FE-E6-F1-US5

Manage Course Info

As an admin, I want to click on the ""Course Info"" link to navigate to a page where I can manage course details and live links so that the course information is accurate and up-to-date.","Acceptance Criteria for User Story 3.FE-E6-F1-US5: Manage Course Info

1. **Link Accessibility**:
   - Ensure that the ""Course Info"" link is easily identifiable and accessible to an admin on the main dashboard or relevant navigation menu.

2. **Navigation Functionality**:
   - Confirm that clicking the ""Course Info"" link redirects the admin to the dedicated page for managing course details without any errors or delays.

3. **Page Layout and Design**:
   - The course management page should display a structured layout where course details and live links are organized for easy editing.

4. **Editing Capabilities**:
   - Provide a clear interface on the course management page for editing course titles, descriptions, schedules, and associated live links.

5. **Validation and Error Handling**:
   - Implement form validation to ensure all course information and live links follow the correct format, with error messages for incorrect data entry.

6. **Save Functionality**:
   - Include a prominently displayed ""Save"" or ""Update"" button that, when clicked, immediately stores the changes made to the course information.

7. **Real-time Updating**:
   - Upon saving, the system should update the course details and live links in real time, reflecting changes on the course management page and any other affected areas in the system.

8. **Confirmation Feedback**:
   - After saving the updates, provide a confirmation message or visual indication to the admin that the course details have been successfully updated.

9. **Access Control**:
   - Verify that only users with admin privileges have the ability to edit and update course information to maintain system integrity.

10. **User Help and Support**:
    - Supply tooltip descriptions or a help section that guides admins on how to effectively manage and update course information.",
Task,,,,3.FE-E6-F1-US5-T1,"3.FE-E6-F1-US5-T1

View Course Details

As an admin, I want to view the current course details on the ""Course Info"" section so that I can understand and verify the existing information","Acceptance criteria for the Product Backlog Item ""View Course Details"" E4-F1-US5-T1:

1. Access and Navigation
   - Given I am an authenticated admin,
   - When I navigate to the course management page,
   - Then the ""Course Info"" section should be accessible and navigable.

2. Visibility and Accuracy of Course Details
   - Given I am on the ""Course Info"" section,
   - When I select a course,
   - Then the details (name, description, duration, links) should be visible and accurate.

3. Handling No Available Course Details
   - Given I am on the ""Course Info"" section,
   - When no course details are available,
   - Then a relevant message should be displayed.

4. Error Message Display
   - Given I am in the ""Course Info"" section,
   - When an error occurs (e.g., data fails to load),
   - Then an appropriate error message should be displayed without showing corrupted data.",
Task,,,,3.FE-E6-F1-US5-T2,"3.FE-E6-F1-US5-T2

Add Live Links

As an admin, I want to add new live links to the ""Course Info"" page so that users can access real-time or synchronoUSlearning opportunities.","Acceptance Criteria for Add Live Links  E4-F1-US5-T2:

1. Access to Add Link Functionality
   - Given I am an authenticated admin,
   - When I navigate to the ""Course Info"" page,
   - Then I should have the ability to add new live links.

2. Adding a New Link
   - Given I am on the ""Course Info"" page,
   - When I use the functionality to add a new link,
   - Then I should be able to input a URL and a descriptive name for the link,
   - And save the new link successfully.

3. Validation of Link Format
   - Given I am adding a new link,
   - When I input the URL,
   - Then the system should validate that the format is correct (e.g., starts with http:// or https://),
   - And provide feedback if the format is invalid.

4. Error Handling for Link Addition
   - Given I am adding a new link,
   - When an error occurs (e.g., failure to save, broken link),
   - Then I should receive a clear and informative error message,
   - And the erroneoUSlink should not be displayed on the ""Course Info"" page.",
Task,,,,3.FE-E6-F1-US5-T3,"3.FE-E6-F1-US5-T3

Archive Courses

As an admin, I want to have an Archive button to archive and unarchive courses.","Acceptance Criteria for the Product Backlog Item: Archive Courses  E4-F1-US5-T3:

1. Access Control
   - Only users with the 'admin' role should have the ability to see and use the Archive button.

2. UI/UX
   - The Archive button should be clearly visible and accessible from the course management or course details page.
   - Courses that are archived should have a distinct visual indicator (e.g., grayed out, labeled as 'Archived') to differentiate them from active courses.
   - Tooltips or hover text should be provided to guide the admin on the functionality of the Archive button.

3. Archiving Functionality
   - Clicking the Archive button on an active course should move the course to an archived state.
   - Once a course is archived, it should no longer appear in the active courses list/view.
   - Archived courses should be moved to a separate 'Archived Courses' list or section.

4. Unarchiving Functionality
   - For archived courses, the Archive button should change its state or label to indicate the 'Unarchive' action (e.g., ""Unarchive"" label or icon change).
   - Clicking the Unarchive button should restore the course to its active state and it should reappear in the active courses list/view.

5. Feedback Mechanism
   - After archiving or unarchiving a course, the system should provide feedback to the admin, such as a success message or notification.
   - In case of any errors during the archiving or unarchiving process, a clear error message should be displayed to the admin.",
Product Backlog Item,,,3.FE-E6-F1-US6,,"3.FE-E6-F1-US6

Edit Course Details

As an admin, I want to edit and update the course details (such as title, description, duration, etc.) on the ""Course Info"" page so that the information presented to the users is accurate and relevant.","Acceptance Criteria for User Story FE-E6-F1-US6: Edit Course Details

1. **Access Control**:
   - Ensure that only users with admin privileges can access the editing functions on the ""Course Info"" page.

2. **Edit Interface**:
   - Provide an intuitive interface on the ""Course Info"" page that allows for editing text fields such as title, description, and duration.

3. **Field Validation**:
   - Each editable field should have validation checks to ensure the input format is correct, with clear error messages for any invalid entries.

4. **Save Functionality**:
   - Include a ""Save"" or ""Update"" button that is enabled once changes are made.

5. **Confirmation Prompt**:
   - Upon clicking ""Save"" or ""Update,"" prompt the admin for confirmation to prevent accidental changes.

6. **Successful Update Feedback**:
   - After confirmation and successful update, provide a visual indicator or message that confirms the course details have been updated.

7. **Data Persistence**:
   - Ensure that once the course details are updated, the changes are stored persistently and reflected accurately across the platform.

8. **Error Handling**:
   - In case of an update failure, display an appropriate error message and ensure that the data remains unchanged.

9. **Audit Trail**:
   - Log the changes made by the admin to the course details for audit purposes.

10. **Undo Functionality**:
    - Offer an option to revert changes to the previous state before the update, in case an admin makes a mistake.

11. **Performance**:
    - The update process should be efficient, with minimal loading time and no significant impact on the system's performance.

12. **Consistency Across Views**:
    - Confirm that updates to course details are consistent across all views where this information is displayed to the users.",
Task,,,,3.FE-E6-F1-US6-T1,"3.FE-E6-F1-US6-T1

Edit Course Title

As an admin, I want to be able to edit the course title so that it accurately reflects the course content and is engaging for potential learners.","Acceptance Criteria for the Product Backlog Item: Edit Course Title  E4-F1-US6-T1:

1. Access Control
   - Only users with the 'admin' role should have the ability to edit course titles.
   
2. Edit Functionality
   - Admins should be able to modify the existing course title by entering a new title into the editable field.
   - The system should allow for the use of alphanumeric characters and common special characters in the course title.
   
3. Save Functionality
   - Upon saving the new title, the system should update all instances where the course title is displayed throughout the platform.
   - The updated title should be immediately visible to the admin upon saving.

4. Feedback Mechanism
   - After saving the new title, a success message should be displayed to confirm that the change has been saved.
   - If the save fails, an error message should be displayed, providing guidance on what went wrong and how to resolve it.",
Task,,,,3.FE-E6-F1-US6-T2,"3.FE-E6-F1-US6-T2

Update Course Description

As an admin, I want to modify the course description to ensure it provides clear and updated information about what learners can expect from the course.","Acceptance Criteria for the Product Backlog Item: Update Course Description  E4-F1-US6-T2:

1. Access Control
   - Only admins should have the ability to modify course descriptions.
   - Unauthorized users should not have access to editing functionalities.

2. Editing Functionality
   - Admins should be able to modify the existing course description text.
   - Changes should not be saved automatically; admins should confirm changes before they are applied.

3. Data Validation
   - The system should validate the updated description to ensure it adheres to any character or word limits and does not contain disallowed content or formats.
   - If the validation fails, a clear and informative error message should be displayed.

4. Data Persistence
   - Once the admin saves the changes, the updated course description should be stored in the database.
   - The updated description should immediately reflect across all instances where the course description is displayed.

5. Feedback Mechanism
   - Upon successfully saving the changes, a confirmation message should be displayed to the admin.
   - If the save operation fails, an error message should be displayed, explaining the issue and suggesting corrective actions.",
Task,,,,3.FE-E6-F1-US6-T3,"3.FE-E6-F1-US6-T3

Modify Course Image

As an admin, I want to change the course image to ensure it is visually appealing and relevant to the course content.","Acceptance Criteria for the Product Backlog Item: Modify Course Image  E4-F1-US6-T3:

1. Access and Visibility
   - Only admins should have the ability to modify course images.
   - The option to change the course image should be easily accessible and visible on the course details/edit page.

2. Image Upload Functionality
   - Admins should be able to upload a new image file from their device.
   - The system should accept common image formats (e.g., .jpg, .png, .gif).
   - There should be a clear way to initiate the image upload process, such as an ""Upload"" button or drag-and-drop functionality.

3. User Feedback
   - Upon successfully changing the course image, a confirmation message should be displayed to the admin.
   - If the image change fails, a clear and informative error message should be displayed.",
Task,,,,3.FE-E6-F1-US6-T4,"3.FE-E6-F1-US6-T4

Implement ""Update"" Button

As an admin, I want an ""Update"" button that saves all the edited course details to ensure that all modifications are stored and reflected accurately on the ""Course Info"" page.","Acceptance Criteria for the Product Backlog Item: Implement ""Update"" Button  E4-F1-US6-T4:

1. Visibility and Accessibility
   - The ""Update"" button should be prominently visible and easily accessible on the course editing page.
   - The button should be located in a logical and intuitive place on the page, typically at the bottom or top of the editing form.

2. Save Functionality
   - Upon clicking the ""Update"" button, all edited data in the form should be saved and stored in the database.
   - The system should validate the edited data to ensure it adheres to any defined formats or constraints.
   
3. User Feedback
   - After clicking the ""Update"" button, admins should receive clear feedback indicating whether the save was successful or not.
   - If successful, a confirmation message (e.g., ""Course details updated successfully."") should be displayed.
   - If the save fails, an error message should be displayed, providing guidance on what went wrong and how to resolve it.",
Product Backlog Item,,,3.FE-E6-F1-US7,,"3.FE-E6-F1-US7

Manage Modules

As an admin, I want to click on the ""Modules"" link to navigate to a page where I can add, remove, or modify modules and videos so that the course content is relevant and organized.","Acceptance Criteria for User Story 3.FE-E6-F1-US7: Manage Modules

1. **Navigation to Modules Page**:
   - Upon clicking the ""Modules"" link, the admin should be redirected to the Modules management page promptly and without errors.

2. **Add Modules**:
   - The Modules page must include a clear and visible option to add new modules.
   - When adding a module, fields for entering the module name, description, and associated videos should be present.
   - Upon submission, the system should validate the input and add the module to the course structure if all fields are correctly filled.

3. **Remove Modules**:
   - Each listed module should have an associated ""Remove"" or ""Delete"" option.
   - Clicking ""Remove"" should prompt a confirmation dialog to prevent accidental deletions.
   - Once confirmed, the module should be permanently removed from the course content.

4. **Modify Modules**:
   - Next to each module, an ""Edit"" or ""Modify"" option should be available.
   - Selecting this option should open a form pre-populated with the existing module details, allowing the admin to update the module name, description, or videos.
   - Changes should be saved and reflected immediately upon confirmation.

5. **Manage Videos within Modules**:
   - The admin should have the ability to add, remove, or rearrange videos within each module via a clear and intuitive interface.

6. **Content Relevance and Organization**:
   - The system should support organizing modules and videos in a logical sequence, with drag-and-drop functionality for ease of arrangement.
   - The interface should provide a preview or summary view of the current course structure for the admin to review changes.

7. **Confirmation and Error Handling**:
   - Any changes made (add, remove, modify) should prompt a confirmation message upon successful completion.
   - Error messages should be specific and instructive, guiding the admin to resolve issues like incomplete fields or system errors.

8. **Accessibility and Permissions**:
   - The Modules management functionality should be accessible only to users with admin privileges.
   - Appropriate security measures should be in place to prevent unauthorized access or modifications.",
Task,,,,3.FE-E6-F1-US7-T1,"3.FE-E6-F1-US7-T1

Add New Modules

As an admin, I want to add new modules to the course so that I can expand and update the course content.","Acceptance Criteria for the Product Backlog Item: Add New Modules  E4-F1-US7-T1:

1. Access to Add Modules
   - Only admins should have the ability to add new modules to a course.
   - The option to add new modules should be easily accessible from the course management or editing page.

2. Module Creation Interface
   - Admins should be provided with a user-friendly interface to create new modules, which should include fields for the module title and topic
   - The interface should allow admins to upload or link to resources (videos, documents, etc.) for the module.

3. Validation and Error Handling
   - The system should validate the input data for each module field to ensure it adheres to expected formats and is not left empty.
   - Clear error messages should be displayed for any issues during the module creation process.

4. Save and Update
   - Upon successful creation of a new module, the system should save the module and update the course content.
   - Admins should receive a confirmation message upon successful addition of a new module.

5. Editing and Deletion
   - Admins should have the option to edit or delete modules after they have been created.
   - The system should prompt for confirmation before deleting a module to prevent accidental data loss.",
Task,,,,3.FE-E6-F1-US7-T2,"3.FE-E6-F1-US7-T2

Remove Existing Modules

As an admin, I want to remove existing modules from the course to ensure that all available content is relevant and up-to-date.","Acceptance Criteria for the Product Backlog Item: Remove Existing Modules  1.E4-F1-US7-T2:

1. Access Control
   - Only users with the 'admin' role should have the ability to see and use the delete symbol to remove modules.

2. UI/UX
   - A delete symbol (e.g., a trash can icon) should be visibly placed next to the input box for the module title on the course management or module details page.
   - Hovering over the delete symbol should display a cursor pointer.

3. Delete Functionality
   - Clicking on the delete symbol should trigger a confirmation dialog box or message asking the admin to confirm the deletion (e.g., ""Are you sure you want to delete this module?"").
   - Upon confirmation, the module should be removed from the course and no longer be accessible to admins, instructors, or students.
   - All data related to the deleted module should be removed or archived based on data retention policies.

4. Feedback Mechanism
   - After a module is deleted, a success message should be displayed to the admin (e.g., ""The module has been successfully deleted."").
   - In case of an error during the deletion process, a clear error message should be displayed, explaining the issue and suggesting potential solutions or next steps.

6. Relevance and Consistency
   - Once a module is deleted, it should immediately be removed from all views and lists across the platform.
   - Users (including admins, instructors, and students) should no longer be able to access or view the deleted module.",
Task,,,,3.FE-E6-F1-US7-T3,"3.FE-E6-F1-US7-T3

Add Video Links to Modules

As an admin, I want to add new videos to modules to provide additional learning materials to the learners.","Acceptance Criteria for the Product Backlog Item: Add Videos to Modules  1.E4-F1-US7-T3:

1. UI/UX for Input Fields
   - The interface should provide two input fields side by side: one for the 'Topic Name' and the other for the 'Video Link'.
   - The input fields should be clearly labeled and have placeholder text to guide the admin on the expected input.
   - The input fields should be sufficiently spaced and visually distinct to ensure clarity and ease of use.

2. Add Video Link Functionality
   - Upon entering a topic name and pasting a video link, and clicking ""Save"" button, the video should be associated with the respective module and topic.
   - The system should validate the video link to ensure it is in a correct and usable format.
   - The topic name should be mandatory and the system should validate that it is not left blank.

3. Display of Added Videos
   - Once a video is added, it should be listed under the respective module with the provided topic name.
   - The listed videos under a module should be displayed in an orderly and readable manner, preferably in a list format.

4. Error Handling and Feedback
   - If an invalid video link is entered, the system should display a clear error message and prevent the addition until a valid link is provided.
   - Upon successful addition or deletion of a video, a success message should be displayed to the admin.
   - If a process (addition, deletion, editing) fails, a clear and concise error message should be displayed, explaining the issue and potential solutions or retry options.

5. Data Persistence
   - All added, edited, or deleted videos and their details should be accurately saved and should persist even after the admin logs out or the system is restarted.",
Task,,,,3.FE-E6-F1-US7-T4,"3.FE-E6-F1-US7-T4

Remove Videos from Modules

As an admin, I want to remove videos from modules to ensure that only relevant and accurate content is available.","Acceptance Criteria for the Product Backlog Item: Add Videos to Modules  1.E4-F1-US7-T4:

1. Delete Video Functionality
   - Next to each listed video (topic name and link), a delete symbol or button should be available.
   - Clicking the delete symbol should remove the respective video from the module.
   - A confirmation dialog should appear when the delete symbol is clicked, asking the admin to confirm the deletion to prevent accidental removals.",
Task,,,,3.FE-E6-F1-US7-T5,"3.FE-E6-F1-US7-T5
Edit Video Details

As an admin, I want to edit details of videos within modules (such as title, description, etc.) to maintain the accuracy and relevance of the content.","Acceptance Criteria for the Product Backlog Item: Add Videos to Modules  E4-F1-US7-T5:

1. Edit Video Details
   - Admins should have the ability to edit the topic name and video link of already added videos.
   - Editing can be facilitated through an ""Edit"" button or by clicking on the topic name or video link, depending on the UI design.",
Task,,,,3.FE-E6-F1-US7-T6,"3.FE-E6-F1-US7-T6

Reorder Modules

As an admin, I want to change the order of modules within the course to ensure a logical and pedagogically sound progression of content.","Acceptance Criteria for the Product Backlog Item: Reorder Modules  E4-F1-US7-T6:

1. Access and Visibility
   - Only admins should have the ability to reorder modules.
   - Upward and downward arrows should be visibly placed to the left of the Title input field for each module.

2. Reordering Functionality
   - Clicking the upward arrow beside a module title should order the module topics ascending.
   - Clicking the downward arrow should order the module topics descending.
   - The reordering should be possible for all listed modules.

3. Immediate Reflection
   - Any change in the order of the modules should be immediately reflected in the adminÈóÇÂÇöÂÄ∑Èë≥Â†ïÂ¥ëÈää‚ïÅÁ£øÈñ∫Â±ªÂÑ≤Èçã view.
   - The new order should be maintained and visible when the admin navigates away and returns to the page.",
Product Backlog Item,,,3.FE-E6-F1-US8,,"3.FE-E6-F1-US8

Manage Projects

As an admin, I want to click on the ""Projects"" link, I should view all the uploaded projects, and have an option to select and upload projects from my local storage.","Acceptance Criteria for User Story FE-E6-F1-US8:

1. **Link Accessibility**: When logged in as an admin, there should be a clearly visible and accessible ""Projects"" link in the main navigation menu or dashboard.

2. **Display of Projects**: Upon clicking the ""Projects"" link, the admin should be directed to a page or section where all previously uploaded projects are displayed in an organized manner.

3. **Project Upload Feature**: The page must include an ""Upload Project"" button or icon that, when clicked, opens a dialog or interface allowing the admin to select and upload project files from local storage.

4. **File Selection and Validation**: The upload interface should enable the admin to browse and select the desired project files, with file type and size validations in place as per the system requirements.

5. **Upload Confirmation**: After a project file is selected and the upload initiated, there should be a visual indication of the upload progress, followed by a confirmation message once the upload is successfully completed.

6. **Error Handling**: If the upload fails or the file does not meet the validation criteria, an appropriate error message should be displayed, informing the admin of the issue and suggesting corrective actions.

7. **Real-time Update**: The list of projects should update in real-time to display the newly uploaded project without needing to refresh the page manually.

8. **Navigation Ease**: After uploading a project, the admin should have the option to return to the list of projects or continue to upload additional projects, facilitating efficient workflow management.

9. **Security**: Ensure that all interactions with the system are secure, and that only admins have the permission to upload and view projects, maintaining the integrity of the data.",
Task,,,,3.FE-E6-F1-US8-T1,"3.FE-E6-F1-US8-T1

View Uploaded Projects

As an admin, I want to view a list of all uploaded projects so that I can manage and review the available projects for the course.","Acceptance Criteria for the Product Backlog Item: View Uploaded Projects  E4-F1-US8-T1:

1. Access Control
   - Only users with the 'admin' role should have the ability to view the list of all uploaded projects.

2. UI/UX
   - The list of uploaded projects should be displayed in a clear, organized, and easily navigable format (e.g., a table or grid).
   - Each project entry should display relevant details such as project name, uploader (student) name, upload date, and status.
   - Admins should have the ability to sort and/or filter the list based on varioUSattributes like project name, uploader name, and upload date.

3. Project Details
   - Clicking on a project name or a dedicated ""View"" button should navigate the admin to a detailed view of the selected project, where they can review all project details and uploaded files.

4. Error Handling
   - If there are no uploaded projects, the system should display a friendly message indicating that there are no projects to display.
   - Any errors (e.g., failed to load projects) should be communicated clearly to the admin through an error message.",
Task,,,,3.FE-E6-F1-US8-T2,"3.FE-E6-F1-US8-T2

Upload New Projects

As an admin, I want to upload new projects from my local storage so that I can provide new materials for learners.","Acceptance Criteria for the Product Backlog Item: Upload New Projects E4-F1-US8-T2:

1. Access Control
   - Only users with admin privileges should have access to the project upload functionality.

2. UI/UX
   - The ""Choose File"" button should be clearly visible and accessible on the project upload page.
   - The ""Upload"" button should be located below the ""Choose File"" button and should be easily identifiable.
   - The UI should provide a clear area or indication (e.g., a box or highlighted section) where files can be dragged and dropped for upload.
   - The UI should display a clear confirmation message upon successful upload and an error message upon failure.

3. File Selection and Preview
   - Clicking the ""Choose File"" button should open the file explorer, allowing the admin to browse and select a file from local storage.
   - Once a file is selected, the file name (and preferably, size and type) should be displayed next to the ""Choose File"" button.
   - Optionally, a preview of the selected file (if applicable, e.g., for image files) should be displayed.

4. File Upload
   - Upon clicking the ""Upload"" button, the selected file should be uploaded to the server.
   - The system should display the upload progress (e.g., a progress bar or percentage).
   - The admin should have the option to cancel the upload while it is in progress.

5. File Validation
   - The system should validate the file type and size against the allowed formats and size limits.
   - If the file does not meet the criteria, a clear error message should be displayed, indicating the issue and any necessary corrective actions.",
Task,,,,3.FE-E6-F1-US8-T3,"3.FE-E6-F1-US8-T3

Open Projects

As an admin, I want to open the projects from the platform so that I can review them.","Acceptance Criteria for the Product Backlog Item: Open Projects E4-F1-US8-T3:

1. Access Control
   - Only users with the 'admin' role should have the ability to open and review projects.

2. Project Visibility
   - All projects that are available for review should be visible and accessible to the admin.
   - Each project should display relevant information (e.g., project name, creator, creation date) in the overview/list view.

3. Open Project Functionality
   - Admins should be able to open any project by clicking on the project name or a designated ÈóÇÂÇöÂÄ∑Èë≥Â†ïÂ¥ëÈää‚ïÅÁ£øÈñ∏Ê¨èÂ©Ç„Ç∏È™û‰Ω∏„ÄíÈçûÂ∂âÊ¢ª button.
   - The system should load the selected project within a reasonable time frame (e.g., a few seconds).

4. Project Detail View
   - Once a project is opened, all details of the project (e.g., project description, files, images, comments) should be displayed in an organized and readable format.
   - Admins should be able to navigate through different sections or pages of the project easily.

5. File Accessibility
   - Admins should be able to open and view all files associated with a project without errors.
   - Supported file types (e.g., .docx, .pdf, .jpg) should open within the platform or be downloadable for external viewing.",
Task,,,,3.FE-E6-F1-US8-T4,"3.FE-E6-F1-US8-T4

Delete Projects

As an admin, I want to delete projects from the platform to ensure that only relevant and current projects are available to learners.","Acceptance Criteria for the Product Backlog Item: Delete Projects E4-F1-US8-T4:

1. Delete Symbol Visibility
   - The delete symbol should be clearly visible and located adjacent to each project title link on the project management or project details page.
   - Only users with the 'admin' role should be able to see and interact with the delete symbol.

2. Delete Action Accessibility
   - Admins should be able to click on the delete symbol to initiate the deletion of a project.
   - The delete symbol should be accessible and functional across varioUSbrowsers and devices.

3. Confirmation Prompt
   - When the delete symbol is clicked, a confirmation prompt should appear, asking the admin to confirm the deletion action (e.g., ""Are you sure you want to delete this project?"").
   - The confirmation prompt should have options to proceed with the deletion (""Yes, delete"") or cancel the action (""Cancel"").

4. Successful Deletion
   - Upon confirming the deletion, the project should be removed from the platform and no longer be accessible to admins, instructors, or learners.
   - A success message should be displayed to the admin, confirming that the project has been deleted (e.g., ""Project successfully deleted."").

5. Error Handling
   - If the project cannot be deleted due to system issues or dependencies, an error message should be displayed to the admin, explaining the issue and suggesting potential next steps or alternatives.",
Product Backlog Item,,,3.FE-E6-F1-US9,,"
3.FE-E6-F1-US9

Manage Enrolled Users

As an admin, I want to click on the ""Enrolled"" link, I should view all the learners names and emails enrolled in that course.  I want an option to unenroll the learners and a text area to enter learner details and enroll them in that course. ","Acceptance Criteria for User Story 3.FE-E6-F1-US9: Manage Enrolled Users

1. **Link Accessibility**: As an admin, when I click on the ""Enrolled"" link, the system should display a list of all learners currently enrolled in the course.

2. **Display of Information**: The list should include both the names and email addresses of the enrolled learners, presented in a clear and readable format.

3. **Unenrollment Option**: Next to each learner's details, there should be an option (such as a button or link) to unenroll that particular learner from the course.

4. **Confirmation of Unenrollment**: Upon selecting the unenrollment option, the system should prompt for confirmation to prevent accidental unenrollments.

5. **Enrollment Text Area**: There must be a text area where the admin can enter the details (name and email) of a new learner to enroll them in the course.

6. **Validation of Enrollment Details**: The system should validate the input details for the correct format and completeness before enrolling a new learner.

7. **Enrollment and Unenrollment Feedback**: After enrolling a new learner or unenrolling an existing one, the system should provide immediate visual feedback (such as a success message or updated list) to confirm the action has been taken.

8. **Functionality across Devices**: The manage enrollment page should function correctly and display properly across different devices and browsers.

9. **Performance**: The actions of enrolling and unenrolling a learner should be completed within a reasonable time frame to ensure a smooth administrative experience.

10. **Error Handling**: In case of an error during enrollment or unenrollment (such as network issues), the system should display an informative error message and allow the admin to retry the action.",
Task,,,,3.FE-E6-F1-US9-T1,"3.FE-E6-F1-US9-T1

View Enrolled Learners

As an admin, I want to click on the ""Enrolled"" link and view a list of all learners (names and emails) enrolled in a course,
So that I can manage and review the users participating in the course.","Acceptance Criteria for ""View Enrolled Learners"" F E4-F1-US9-T1:

1. Access to Enrolled Link
   - Given I am an admin,
   - When I log into the admin dashboard,
   - Then I should see an ""Enrolled"" link.

2. View Enrolled Learners
   - Given I am an admin and on the admin dashboard,
   - When I click on the ""Enrolled"" link,
   - Then I should be navigated to a page displaying a list of all enrolled learners.

3. Display Learner Details
   - Given I am on the page displaying enrolled learners,
   - Then I should see the following details for each learner:
     - Name
     - Email
     - Button to Unenroll the user

4. Empty State
   - Given I am an admin and no learners are enrolled in a course,
   - When I view the enrolled learners page,
   - Then I should see a message indicating that there are no learners enrolled.",
Task,,,,3.FE-E6-F1-US9-T2,"3.FE-E6-F1-US9-T2

Unenroll Learners

As an admin, I want the ability to unenroll learners from a course,
So that I can manage course participation and ensure only relevant users are enrolled.","Acceptance Criteria for ""Unenroll Learners"" F E4-F1-US9-T2:

1. Access to Unenroll Button
   - Given I am an admin,
   - When I view the list of enrolled learners in a course,
   - Then I should see an ""Unenroll"" button next to each learnerÈóÇÂÇöÂÄ∑Èë≥Â†ïÂ¥ëÈää‚ïÅÁ£øÈñ∫Â±ªÂÑ≤Èçã name.

2. Visibility of Unenroll Button
   - Given I am a user with a role other than admin,
   - When I view the list of enrolled learners,
   - Then I should not see the ""Unenroll"" button.

3. Unenroll Confirmation
   - Given I am an admin and I click the ""Unenroll"" button,
   - When the action is initiated,
   - Then I should see a confirmation popup asking if I am sure I want to unenroll the learner.

4. Unenroll Action
   - Given I am an admin and I confirm the unenrollment,
   - When the unenroll action is processed,
   - Then the learner should be removed from the course enrollment list,
   - And the learner should no longer have access to the course.

5. Unenroll Notification
   - Given a learner is unenrolled from a course,
   - When the action is completed,
   - Then the learner should receive a notification informing them of the unenrollment.",
Task,,,,3.FE-E6-F1-US9-T3,"3.FE-E6-F1-US9-T3

Enroll New Learners via Text Area

As an admin, I want a text area to manually enter learner details (like name and email) and enroll them in a course,
So that I can manage and facilitate the enrollment of new users.","Acceptance Criteria: Enroll New Learners via Text Area E4-F1-US9-T3:

1. Text Area Visibility
   - Given I am an admin,
   - When I access the ""Enroll New Learners"" section,
   - Then a text area for entering learner details should be visible.

2. Input Format Instructions
   - Given I am in the ""Enroll New Learners"" section,
   - When I focUSon the text area,
   - Then I should see instructions or a placeholder indicating the input format for learner details.

3. Multiple Learner Entry
   - Given I am entering learner details,
   - When I input details for multiple learners,
   - Then each learner's details should be entered using a comma.

4. Learner Details Validation
   - Given I have input learner details,
   - When I submit the details,
   - Then the system should validate the format and provide feedback if entries are invalid.

5. Successful Enrollment and Notification
   - Given I have entered valid learner details,
   - When I submit the details,
   - Then learners should be enrolled in the course and receive a notification email.

6. Enrollment Feedback
   - Given I have submitted learner details,
   - When the enrollment process concludes,
   - Then I should receive a message indicating success or failure.

7. Handling Duplicate Entries
   - Given I have input learner details,
   - When I submit details with existing learners,
   - Then the system should highlight duplicates and proceed with enrolling new learners.",
Product Backlog Item,,,3.FE-E6-F1-US10,,"3.FE-E6-F1-US10

Manage Resumes

As an admin, I want to click on the ""Resumes"" link, I should view all the uploaded Resumes, and have an option to select and upload Resume from my local storage.","Acceptance Criteria for User Story FE-E6-F1-US10: Manage Resumes

1. **Resumes Link Accessibility**:
   - Ensure that the ""Resumes"" link is easily accessible and visible on the admin panel/dashboard.

2. **Display of Uploaded Resumes**:
   - Upon clicking the ""Resumes"" link, the system should display a list/grid of all previously uploaded resumes.
   - Each resume entry must show relevant details such as the candidate's name, upload date, and file type.

3. **Resume Selection and Viewing**:
   - Admins should have the ability to select and view a full version of any resume from the uploaded list.
   - The viewing option should support common file formats like .pdf, .doc, and .docx.

4. **Upload Functionality**:
   - The interface should include a clear and responsive ""Upload Resume"" button or icon.
   - Clicking the upload option should open the admin's local storage directories to select a resume file.

5. **File Type and Size Validation**:
   - The system should only accept resume files in specified formats (e.g., .pdf, .docx) and within a certain size limit.
   - If an admin selects a file outside of these parameters, a descriptive error message should be displayed.

6. **Successful Upload Confirmation**:
   - Once a resume is selected and the upload is initiated, there should be a progress indicator.
   - Upon successful upload, the system should confirm with a message and the new resume should appear in the list of uploaded resumes.

7. **Error Handling for Upload Failures**:
   - In the event of an upload failure, the system should provide a clear error message detailing the reason (e.g., network error, file corruption).

8. **Consistency Across Platforms**:
   - The ""Manage Resumes"" feature should function consistently across different web browsers and devices.

9. **Security and Privacy**:
   - Ensure that all resume data is handled securely and in compliance with data privacy regulations.

10. **Performance**:
    - The resume management page should load efficiently, even with a large number of resume files.",
Task,,,,3.FE-E6-F1-US10-T1,"3.FE-E6-F1-US10-T1

Upload New Resumes

As an admin, I want to upload new projects from my local storage so that I can provide new materials for learners.","Acceptance Criteria for the Product Backlog Item: Upload New Resumes E4-F1-US10-T1:

1. Access Control
   - Only users with admin privileges should have access to the Resume upload functionality.

2. UI/UX
   - The ""Choose File"" button should be clearly visible and accessible on the Resume upload page.
   - The ""Upload"" button should be located below the ""Choose File"" button and should be easily identifiable.
   - The UI should provide a clear area or indication (e.g., a box or highlighted section) where files can be dragged and dropped for upload.
   - The UI should display a clear confirmation message upon successful upload and an error message upon failure.

3. File Selection and Preview
   - Clicking the ""Choose File"" button should open the file explorer, allowing the admin to browse and select a file from local storage.
   - Once a file is selected, the file name (and preferably, size and type) should be displayed next to the ""Choose File"" button.
   - Optionally, a preview of the selected file (if applicable, e.g., for image files) should be displayed.

4. File Upload
   - Upon clicking the ""Upload"" button, the selected file should be uploaded to the server.
   - The system should display the upload progress (e.g., a progress bar or percentage).
   - The admin should have the option to cancel the upload while it is in progress.

5. File Validation
   - The system should validate the file type and size against the allowed formats and size limits.
   - If the file does not meet the criteria, a clear error message should be displayed, indicating the issue and any necessary corrective actions.",
Task,,,,3.FE-E6-F1-US10-T2,"3.FE-E6-F1-US10-T2

Open Resume

As an admin, I want to open the Resumes from the platform so that I can review them.","Acceptance Criteria for the Product Backlog Item: Open Resumes E4-F1-US10-T2:

1. Access Control
   - Only users with the 'admin' role should have the ability to open and review Resumes.
   
2. Project Visibility
   - All Resumes that are available for review should be visible and accessible to the admin.
   - Each Resume should display relevant information (e.g., project name, creator, creation date) in the overview/list view.

3. Open Resume Functionality
   - Admins should be able to open any Resume by clicking on the project name or a designated ÈóÇÂÇöÂÄ∑Èë≥Â†ïÂ¥ëÈää‚ïÅÁ£øÈñ∏Ê¨èÂ©Ç„Ç∏È™û‰Ω∏„ÄíÈçûÂ∂âÊ¢ª button.
   - The system should load the selected Resume within a reasonable time frame (e.g., a few seconds).

4. Resume Detail View
   - Once a Resume is opened, all details of the Resume (e.g., Resume description, files, images, comments) should be displayed in an organized and readable format.
   - Admins should be able to navigate through different sections or pages of the Resume easily.

5. File Accessibility
   - Admins should be able to open and view all files associated with a Resume without errors.
   - Supported file types (e.g., .docx, .pdf, .jpg) should open within the platform or be downloadable for external viewing.",
Task,,,,3.FE-E6-F1-US10-T3,"3.FE-E6-F1-US10-T3

Delete Resumes

As an admin, I want to delete Resumes from the platform.","Acceptance Criteria for the Product Backlog Item: Delete Projects E4-F1-US10-T3:

1. Delete Symbol Visibility
   - The delete symbol should be clearly visible and located adjacent to each Resume title link.
   - Only users with the 'admin' role should be able to see and interact with the delete symbol.

2. Delete Action Accessibility
   - Admins should be able to click on the delete symbol to initiate the deletion of a Resume.
   - The delete symbol should be accessible and functional across varioUSbrowsers and devices.

3. Confirmation Prompt
   - When the delete symbol is clicked, a confirmation prompt should appear, asking the admin to confirm the deletion action (e.g., ""Are you sure you want to delete this Resume?"").
   - The confirmation prompt should have options to proceed with the deletion (""Yes, delete"") or cancel the action (""Cancel"").

4. Successful Deletion
   - Upon confirming the deletion, the Resume should be removed from the platform and no longer be accessible to admins, instructors, or learners.
   - A success message should be displayed to the admin, confirming that the Resume has been deleted (e.g., ""Resume successfully deleted."").

5. Error Handling
   - If the Resume cannot be deleted due to system issues or dependencies, an error message should be displayed to the admin, explaining the issue and suggesting potential next steps or alternatives.",
Epic,3.FE-E7,,,,"3.FE-E7
Learner Dashboard
",,
Feature,,3.FE-E7-F1,,,"3.FE-E7-F1

Integrated Chat Functionality on All LMS Pages

The ""Integrated Chat Functionality"" F embeds real-time support directly into the LMS, providing users with instant access to assistance on every page. This streamlined communication tool bolsters user confidence and engagement by offering immediate responses to inquiries or issues, enhancing the overall navigational efficiency and educational effectiveness of the platform.
                                   
   



","Acceptance Criteria for Chat Functionality (FE-E7-F1-US1):

1. **Ubiquitous Availability**: A chat function should be present and easily accessible on every page of the LMS.

2. **Visibility and Accessibility**: The chat icon/button must be prominently visible without obstructing content, and accessible from any point within the LMS user interface.

3. **Initiation and Response**: Upon clicking the chat icon/button, the chat window should open promptly, allowing the user to begin a conversation immediately.

4. **Customer Support Interaction**: The chat must connect the user to a customer support representative or an automated chatbot capable of providing assistance or answering questions.

5. **Functionality Across Pages**: The chat function should remain active and maintain conversation history even when the user navigates to different pages within the LMS.

6. **Notification and Alerts**: If the chat is minimized or the user is not currently on the chat window, visual and/or auditory notifications should alert the user of new messages from the support team.

7. **24/7 Availability or Schedule Indication**: The chat service should be available 24/7, or if not, the chat window should clearly indicate the support team's available hours.

8. **User Experience**: The chat feature should be intuitive to use, with options to minimize, maximize, and close the window, and should not significantly impact the platform's performance or the user's browsing experience.

9. **Assistance and Query Resolution**: The chat function should enable the user to seek help regarding the LMS and ask questions, with a reasonable expectation of receiving clear and helpful responses.

10. **Feedback Mechanism**: After the chat interaction, an option should be provided for the user to give feedback on their customer support experience.",
Product Backlog Item,,,3.FE-E7-F1-US1,,"3.FE-E7-F1-US1

Chat Functionality

As a user of the LMS, I expect to see a chat function on every page that allows me to interact with the customer support team, ensuring I can seek assistance or ask questions at any point during my experience on the platform.
Turn on screen reader support",,
Task,,,,3.FE-E7-F1-US1-T1,"3.FE-E7-F1-US1-T1

Accessible Chat Icon

As a user, I want a clearly visible chat icon on every page of the LMS,
So that I can easily initiate a chat whenever I need assistance.","Acceptance Criteria for Accessible Chat Icon E5-F1-US1-T1

1. Visibility Across Pages
   - Scenario: Ensuring the chat icon is present on all pages of the LMS.
   - Given I am navigating through different pages of the LMS,
   - Then the chat icon should be consistently visible on every page.

2. Distinct Visibility
   - Scenario: Ensuring the chat icon is distinguishable and not blending with other elements.
   - Given I am on any page of the LMS,
   - Then the chat icon should be clearly visible and not blend with the background or other elements.",
Task,,,,3.FE-E7-F1-US1-T2,"3.FE-E7-F1-US1-T2

Instant Chat Initiation

As a user, I want the chat to open immediately upon clicking the chat icon, So that I can quickly start interacting with customer support.","Acceptance criteria for Accessible Chat Icon E5-F1-US1-T2

1. Visibility Across Pages
   - Scenario: Ensuring the chat icon is present on all pages of the LMS.
   - Given I am navigating through different pages of the LMS,
   - Then the chat icon should be consistently visible on every page.

3. Interactive Hover State
   - Scenario: Checking the interactive state of the chat icon.
   - Given I hover over the chat icon,
   - Then it should exhibit a visual change to indicate interactivity.

4. Offline StatUSIndicator
   - Scenario: Identifying when chat support is offline.
   - Given chat support is offline,
   - Then the chat icon should display an offline indicator.",
Task,,,,3.FE-E7-F1-US1-T3,"3.FE-E7-F1-US1-T3

Real-Time Interaction with Support

As a user, I want to interact in real-time with a customer support representative, So that I can have my questions answered and issues resolved promptly","Acceptance Criteria Real-Time Interaction with Support E5-F1-US1-T3

1. Immediate Chat Response
   - Scenario: Receiving an immediate automated response in the chat.
   - Given I initiate a chat,
   - Then I should receive an immediate automated response acknowledging my interaction.

2. Availability of Live Agent
   - Scenario: Ensuring a live agent is available for interaction.
   - Given I am interacting with the chat,
   - Then a live agent should be available to respond to my queries in a timely manner.

3. Real-Time Messaging
   - Scenario: Exchanging messages in real-time.
   - Given I send a message in the chat,
   - Then I should be able to see my message and receive a response without needing to refresh the page.

4. Chat Duration
   - Scenario: Ensuring the chat remains active for the duration of the interaction.
   - Given I am engaged in a chat,
   - Then the chat should remain active and not time out, disrupting the interaction.

5. Offline Message
    - Scenario: Sending a message when agents are offline.
    - Given I send a message outside of support hours,
    - Then I should receive a message informing me of the offline statUSand expected response time.",
Task,,,,3.FE-E7-F1-US1-T4,"3.FE-E7-F1-US1-T4

File Sharing in Chat

As a user, I want to be able to share files/screenshots through the chat, So that I can provide additional context or details to the support team.","Acceptance Criteria for E5-F1-US1-T4

1. File Upload Option
   - Scenario: Identifying the file upload option in the chat.
   - Given I am interacting with the chat,
   - Then I should be able to identify and utilize a file upload option.

2. File Type and Size Restrictions
   - Scenario: Ensuring adherence to file type and size limitations.
   - Given I attempt to upload a file,
   - Then the system should enforce restrictions on file type and size, and provide feedback if a file is ineligible.

3. Successful File Upload
   - Scenario: Verifying the successful upload and sharing of a file.
   - Given I upload a file adhering to the allowed types and sizes,
   - Then the file should be successfully sent to the support team via chat.

4. Error Handling
   - Scenario: Handling errors during file upload.
   - Given an error occurs during file upload (e.g., network issue, file corruption),
   - Then I should receive a clear error message and potential steps for resolution.",
Task,,,,3.FE-E7-F1-US1-T5,"3.FE-E7-F1-US1-T5

Offline Support Message

As a user, I want to see a message informing me about the availability of support when they are offline, So that I can know when to expect a response.","Acceptance Criteria Offline Support Message E5-F1-US1-T5

1. Visibility of Offline Message
   - Scenario: Ensuring the offline message is visible when support is not available.
   - Given I am using the chat F while support is offline,
   - Then I should see a message informing me about the offline statUSof support.

2. Clarity of Offline Message
   - Scenario: Ensuring the offline message clearly communicates the unavailability of immediate support.
   - Given I am viewing the offline message,
   - Then the message should clearly indicate that support is currently unavailable and responses will be delayed.

3. Alternative Contact Options
   - Scenario: Providing alternative contact options in the offline message.
   - Given I am viewing the offline message,
   - Then I should be provided with alternative methods to contact support (e.g., email, phone).

4. Visibility Across Pages
   - Scenario: Ensuring the offline message is visible on all pages when support is offline.
   - Given I am navigating through different pages of the LMS,
   - Then the offline message should be consistently visible on every page.",
Epic,4.BE,,,,Java Tasks,,
Feature,,4.BE-F1,,,,,
Product Backlog Item,,,4.BE-J-T1,,Java Task-1: Set up a Gradle Spring Boot Project,"Task 1: Setting Up a Gradle Spring Boot Project #1
Description:
The aim of this issue is to setup a spring boot project using Gradle, and have a Postgres DB running in local.
Steps:
Create a new Spring Boot project using Gradle.
Build your project with Gradle build.
Run your Spring Boot application
Setup a Postgres DB in local using docker compose file.
Configure the PostgreSQL service with environment variables for username, password, and database name.
Start the docker container and Create any table to verify the connection.
Additional Information:
Make sure you have Java (17), Gradle, postman and Docker installed on your machine before proceeding.
Resources:
Getting started with Spring Boot
Spring initializer
Gradle Installation
Postgres docker compose file

Setting UP spring boot JPA project
Objective:
The objective of this issue is to setting up a Spring boot Java Persistence API (JPA) project that allows performing CRUD (Create, Read, Update, Delete) operations on a local PostgreSQL database.
Steps:
Configure the database properties like url, password, etc in application.properties or yml file.
Create entity classes that represent the database tables for which CRUD operations will be performed.
Create a repository interface extending JpaRepository to handle CRUD operations for the entities.
Implement service classes that interact with the repository and perform CRUD operations.
Create controller classes to handle HTTP requests and invoke service methods accordingly.
Test the application using postman
Additional Information:
create entity class User with id, name, email field. create controller to add, get, update and delete user.
Resources:
JPA Example",
Product Backlog Item,,,4.BE-J-T2,,Java Task-2: Set up Spring Boot JPA Project,"Task 2:Setting UP spring boot JPA project
Objective:
The objective of this issue is to setting up a Spring boot Java Persistence API (JPA) project that allows performing CRUD (Create, Read, Update, Delete) operations on a local PostgreSQL database.
Steps:
Configure the database properties like url, password, etc in application.properties or yml file.
Create entity classes that represent the database tables for which CRUD operations will be performed.
Create a repository interface extending JpaRepository to handle CRUD operations for the entities.
Implement service classes that interact with the repository and perform CRUD operations.
Create controller classes to handle HTTP requests and invoke service methods accordingly.
Test the application using postman
Additional Information:
create entity class User with id, name, email field. create controller to add, get, update and delete user.
Resources:
JPA Example",
Product Backlog Item,,,4.BE-J-T3,,Java Task-3: Develop Signup API Endpoint in UserController,"Develop Signup API Endpoint in UserController
Description:
The signup API endpoint is essential for user and admin sign-up functionality. Our goal is to implement this endpoint to facilitate the sign-up process and generate the appropriate response.
API Endpoint Details:
HTTP Method: POST, Endpoint: /signup
Request Body:
{
  ""userName"": ""example_username"",
  ""email"": ""example@example.com"",
  ""password"": ""examplePassword123"",
}
Response Body:
{
  ""token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."", 
  ""username"": ""example_username"",
  ""message"": ""User signed up successfully.""
}

Step-by-Step Implementation:
Method Signature and Annotations:
Implement a method with the appropriate signature and annotations to handle the signup functionality. Use the @PostMapping annotation to map the endpoint, and @transactional to ensure transactional behavior.
Input Validation: Validate the input parameters from the credentials object:
Check if the email, username, and password are not empty or null.
Ensure that the email is in a valid format.
Email Existence Check:Check if the provided email already exists in the database. If it does, throw an exception indicating that the email is already in use.
Image Storage:If an image is provided, store it in Azure Blob Storage using the blobService.storeFile method, appending the email and original image filename.
Create User Object:
Create a new User object and populate it with the necessary details:
Set the user role to ""USER"".
Set the creation and update timestamps.
Set the profile image URL obtained from Azure Blob Storage.
Password Encryption:Encrypt the user's password using the password encoder.
Save User Details:Save the user details to the database using the userRepo.save method.
Image Upload:If an image is provided, upload it to Azure Blob Storage using the client.upload method.
Invoke Login Endpoint:Invoke the login endpoint (likely within the same controller or another authentication controller) to authenticate the user using the JWT request.
Return JWT Response:Return the JWT response received from the login call, containing the authentication token, username, and a success message.
Logging: Implement appropriate logging using log.info to capture significant events during the signup process.",
Product Backlog Item,,,4.BE-J-T4,,Java Task-4: Implement User Authentication - Login,"Implement User authentication (login)
Objective:
Implement user authentication using an authentication manager, generate a JWT token, and update the last login field in the user table.
Steps:
Create a User entity with below field and do some manual entry later will develop an api to register user
1. id: int (auto-generated, primary key)
2. username: String
3. email: String
4. password: String
5. createdAt: LocalDateTime
6. updatedAt: LocalDateTime
7. lastLogin: LocalDateTime (to be updated on login)
8. role: String
9. imgUrl: String
10. resetToken: String
11. tokenGeneratedAt: LocalDateTime
12. isEmailVerified: Boolean
13. emailVerificationToken: String
14. verificationTokenGeneratedAt: LocalDateTime
Create an endpoint(POST: /auth/login) to handle the login request. It will take user credentials (email, password).
Request Body (for authentication):
{
  ""email"": ""example@example.com"",
  ""password"": ""yourpassword""
}
Response Body (after successful authentication):
{
  ""jwtToken"": ""your_jwt_token_here"",
  ""username"": ""example_username""
}
Authenticate the user using the Authentication Manager.
Generate a JWT token upon successful authentication.
Update the user's last login time in the database.
Return the jwt token as response of the endpoint. 
Additional Information:
read about the spring boot bean, use bean to create any class object.
read about lombok and spring boot annotation like component, autowired, ...
read about UserDetailsService and loadUserByUserName method for authentication in java
Resources:
JWT intoduction
Authentication manager",
Product Backlog Item,,,4.BE-J-T5,,Java Task-5: Implement User Profile Update API,"Description:
We need to implement the userupdate API for updating user profiles, including username, email, and password. Additionally, the API should support uploading a user's profile image to Azure Blob storage.
API Details:
Endpoint: PUT /user/{userId}/update
Request Body:
{
  ""userId"": 123,              // The ID of the user to update
  ""userName"": ""UpdatedUser"",  // Updated username (optional)
  ""email"": ""newemail@example.com"",  // Updated email (optional)
  ""password"": ""newpassword123""     // Updated password (optional)
}
Response:
A string indicating the success/failure message.
// Update success
{
  ""message"": ""User updated Successfully""
}

// Invalid user

{
  ""error"": ""Invalid user"",
  ""message"": ""User update failed""
}

// Validation error
{
  ""error"": ""Invalid request data"",
  ""message"": ""User update failed""
}
API Logic Summary:
Fetch the user by userId and validate that the user making the request matches the user in the database based on their email.
Update the user's email, username, or password based on the data provided in the UserSignUpDto.
Hash the password securely before saving it.
Handle profile image upload to Azure Blob storage:
Delete the user's existing image.
Upload the new image with a unique name and update the image URL.
Update the updatedAt timestamp of the user.
Save the updated user information to the database.
Additional Information:
The UserSignUpDto includes fields for updating the user's information.
Properly validate and handle exceptions.
Return an appropriate success message upon successful update.",
Product Backlog Item,,,4.BE-J-T6,,Java Task-6: Implement Generate Password Reset Link and Update Password APIs,"Task-8: Implement ""Generate Password Reset Link"" and ""Update Password"" APIs #8
Description:
We need to implement the ""Generate Password Reset Link"" and ""Update Password"" APIs, which allow users to request a password reset link and update their password. These APIs are essential for user account management.
API Details:
1. Generate Password Reset Link API:
Endpoint: POST /forgotPassword
Request Body:
email (String) - The user's email address.
Response:
A success message indicating that the password reset link has been sent successfully.
2. Update Password API:
Endpoint: PUT /forgotPassword
Request Parameters:
token (String) - The password reset token.
Request Body:
email (String) - The user's email address.
password (String) - The new password.
Response:
A success message indicating that the password has been updated successfully.
API Logic Summary:
1. Generate Password Reset Link API:
Receive the user's email address.
Generate a unique password reset token.
Set the token's expiration time.
Compose an email with the reset link and send it to the user's email address.
Return a success message.
2. Update Password API:
Receive the token, email, and new password.
Validate the token's expiration.
Verify that the token matches the user's stored reset token.
Update the user's password.
Return a success message.
Additional Information:
Ensure that the password reset link email contains the reset link.
Handle exceptions, including cases where the token is expired or invalid.
Properly validate the user's email and password.
Return appropriate success messages for both APIs.",
Product Backlog Item,,,4.BE-J-T7,,Java Task-7: Implement Email Verification API,"Task 11: Implement ""Email Verification"" API #11
Description:
We need to implement the ""Email Verification"" API, which allows users to verify their email addresses by clicking on a verification link sent to their email. This API is essential to ensure user account security and access to certain features.
API Details:
Send Email Verification API:
Endpoint: POST /verify-email
Request:
{
  ""email"": ""user@example.com""
}
Response:
""Email verification link sent successfully""
Verify Email API:
Endpoint: PUT /verify-email
Request:
{
  ""token"": ""verification_token""
}
Response:
""Email verified successfully""
API Logic Summary:
Send Email Verification:
Generate a unique verification token.
Update the user's record with the verification token and token generation time.
Send an email containing the verification link to the provided email address.
Return the success message.
Verify Email:
Parse the token and user ID from the request.
Check if the token has expired.
Compare the token with the user's stored email verification token.
Mark the user's email as verified and update the user's record.
Return the success message.
Additional Information:
Ensure that the email verification link is sent properly.
Handle exceptions, including cases where the user is not found or the token is invalid.
Secure the endpoint and perform necessary validations.",
Product Backlog Item,,,4.BE-J-T8,,Java Task-8: Implement Get Courses for the User API,"Task 6: Implement ""Get Courses for the User"" API #6
Description:
We need to implement the ""Get Courses for the User"" API, which allows users to retrieve a list of courses associated with their account.
API Details:
Endpoint: GET /courses
Request Body:
No request body (relying on user authentication via Principal).
Response:
A JSON array containing course details, including:
id (int): The unique identifier for the course.
title (string): The title of the course.
picture (string): The URL of the course picture.
archived (boolean): A boolean indicating whether the course is archived.
updatedAt (datetime): The timestamp when the course was last updated.
createdAt (datetime): The timestamp when the course was created.
description (string): A brief description of the course.
liveLink (string): The URL for the live course content.
API Logic Summary:
Authenticate the user based on the provided Principal.
Verify that the user making the request matches the user in the database based on their email.
Retrieve a list of courses associated with the user's account.
Return the list of courses in the response.
Additional Information:
Ensure proper authentication using Principal.
Validate the user to prevent unauthorized access to courses.
Handle exceptions and error responses.
Implement pagination if the list of courses is extensive.
Course Entity:
id: int
title: String
picture: String
archived: Boolean
updatedAt: LocalDateTime
createdAt: LocalDateTime
description: String
liveLink: String",
Product Backlog Item,,,4.BE-J-T9,,Java Task-9: Implement Get Specific Course for the User API,"Task 7: Implement ""Get Specific Course for the User"" API #7
Description:
We need to implement the ""Get Specific Course for the User"" API, which allows users to retrieve details of a specific course associated with their account.
API Details:
Endpoint: GET /courses/{courseId}
Request Parameters:
courseId (Integer) - The unique identifier of the course to retrieve.
Request Headers:
Authorization - Bearer token for user authentication.
Response:
A JSON object containing course details, including id, title, picture, archived status, updatedAt, createdAt, description, liveLink, and related modules, projects, resources, and topics.
e.g.
{
  ""id"": 1,
  ""title"": ""Sample Course"",
  ""picture"": ""https://example.com/sample-course.jpg"",
  ""archive"": false,
  ""liveLink"": ""https://example.com/sample-course/live"",
  ""description"": ""This is a sample course for testing."",
  ""createdAt"": ""2023-10-10T14:30:00"",
  ""updatedAt"": ""2023-10-15T08:00:00"",
  ""projectFiles"": [""project1.pdf"", ""project2.docx""],
  ""resourceFiles"": [""resource1.pdf"", ""resource2.docx""],
  ""modulesOrder"": [1, 2, 3],
  ""modules"": [
    {
      ""id"": 1,
      ""title"": ""Module 1"",
      ""topics"": [""Topic 1.1"", ""Topic 1.2""]
    },
    {
      ""id"": 2,
      ""title"": ""Module 2"",
      ""topics"": [""Topic 2.1"", ""Topic 2.2""]
    }
  ],
  ""resumeFiles"": [""resume1.pdf"", ""resume2.docx""],
  ""assignments"": [""assignment1.pdf"", ""assignment2.docx""],
  ""enrolledBy"": [101, 102, 103]
}
API Logic Summary:
Authenticate the user based on the provided Bearer token.
Verify that the user making the request matches the user in the database based on their email.
Check if the user is enrolled in the specified course or is an admin.
Retrieve details of the specific course using the courseId.
Retrieve related modules, projects, resources, and topics associated with the course.
Construct the response JSON object with all course details.
Additional Information:
Properly authenticate the user using the Bearer token.
Validate the user to ensure they have access to the requested course.
Handle exceptions and error responses, including cases where the requested course does not exist.",
Product Backlog Item,,,4.BE-J-T10,,Java Task-10: Implement Fetch User Info API,"Task 9: Implement ""Fetch User Info"" API #9
Description:
We need to implement the ""Fetch User Info"" API, which allows clients to retrieve user information, including details such as email, name, last login timestamp, and the courses associated with the user.
API Details:
Fetch User Info API:
Endpoint: GET /users/user-info
Request:
No request data is required, as it retrieves the user's information based on the authenticated user (Principal).
Response:
{
  ""id"": 1,
  ""email"": ""user@example.com"",
  ""name"": ""John Doe"",
  ""lastLogin"": ""2023-10-15T08:30:00"",
  ""courses"": [
    {
      ""id"": 101,
      ""title"": ""Course A""
    },
    {
      ""id"": 102,
      ""title"": ""Course B""
    }
  ]
}
API Logic Summary:
Retrieve the authenticated user's information using the Principal object.
Fetch user details from the database, including email, name, and last login timestamp.
Fetch a list of courses associated with the user, including their IDs and titles.
Compose and return the response JSON as described above.
Additional Information:
Ensure that the response JSON matches the provided structure.
Handle exceptions, including cases where the user is not found.
Make sure to secure the endpoint and only allow authenticated users to access it.",
Product Backlog Item,,,4.BE-J-T11,,Java Task-11: Implement Get User Details API,"Task 10: Implement ""Get User Details"" API #10
Description:
We need to implement the ""Get User Details"" API, which allows clients to retrieve detailed information about a user, including their ID, role, email, name, profile image URL, and email verification status.
API Details:
Endpoint: GET /me
Request:
No request data is required, as it retrieves the user's information based on the authenticated user (Principal).
Response:
{
  ""id"": 1,
  ""role"": ""USER"",
  ""email"": ""user@example.com"",
  ""name"": ""John Doe"",
  ""imgUrl"": ""https://example.com/images/johndoe.jpg"",
  ""isEmailVerified"": true
}
API Logic Summary:
Retrieve the authenticated user's information using the Principal object.
Fetch user details from the database, including their ID, role, email, name, profile image URL, and email verification status.
Compose and return the response JSON as described above.
Additional Information:
Handle exceptions, including cases where the user is not found.
Secure the endpoint and only allow authenticated users to access it.",
Product Backlog Item,,,4.BE-J-T12,,Java Task-12: Implement User Import API,"Task 12: Implement ""User Import"" API #12
Description:
We need to implement the ""User Import"" API, which allows administrators to bulk import users from a CSV file. This API is essential to efficiently onboard multiple users into our system.
API Details:
Import Users API:
Endpoint: POST /import
Request:
[form data containing the CSV file]
Response:
""Import successful""
API Logic Summary:
The API will accept a CSV file as part of a form data request.
The server will validate that the uploaded file is in CSV format.
It will iterate through the CSV records, skipping the header.
For each record, it will:
- Check if a user with the same email already exists.
- Verify the email format (must be a valid email).
- Create a new user with the provided information (user name, email, and a default password).
Once all valid users are processed, the server will save them in bulk to the database.
Return a success message indicating the import was successful.
Additional Information:
Ensure proper validation of CSV file format and content.
Validate email addresses for correctness.
Handle exceptions for cases like invalid email format or empty user names.",
Product Backlog Item,,,4.BE-J-T13,,Java Task-13: Implement Sample File Download API,"Task 13: Implement ""Sample File Download"" API #13
Description:
We need to implement the ""Sample File Download"" API to provide users with a sample CSV file that they can use as a template for bulk user import. This API will be useful for users who are not familiar with the format and structure of the CSV file required for user imports.
API Details:
Sample File Download API:
Endpoint: GET /sample-file
Response:
A CSV file download with sample user data.
API Logic Summary:
When a user accesses the ""Sample File Download"" API, it returns a sample CSV file.
The CSV file contains sample user data as follows:
name,email
John Doe,johndoe@gmail.com
The API sets appropriate response headers to specify the content type and file name for the download.
Additional Information:
The sample file should be in CSV format.
Ensure that the sample data reflects the structure of the data expected for user imports.",
Product Backlog Item,,,4.BE-J-T14,,Java Task-14: Implement Generate SAS Token API,"Task 14: Implement ""Generate SAS Token"" API #14
Description:
This API generates a Shared Access Signature (SAS) token for secure access to Azure Blob Storage resources. It takes a URL and the user's principal as input and returns the URL with the appended SAS token.
API Details:
HTTP Method: POST /generateSasToken
Request:
{
  ""url"": ""https://your-blob-storage-url.com/container/blob.jpg"",
}
Response:
Sample JSON Response:
""https://your-blob-storage-url.com/container/blob.jpg?yourGeneratedSasToken""
API Logic Summary:
Checks if the user exists in the database.
Extracts the blob name from the URL.
Uses the Azure SDK to create a BlobServiceClient.
Obtains a reference to the Blob Container client.
Defines SAS token signature values with permissions, start time, and expiry time.
Generates the SAS token using the Blob Container client.
Returns the URL with the appended SAS token.
Additional Information:
This URL with the SAS token allows temporary, controlled access to the specified blob for the user identified by their principal.",
Product Backlog Item,,,4.BE-J-T15,,Java Task-15: Implement List All Courses API under Course Controller,"Task 15: Implement /courses/all api under course controller #15
Description:
We need to develop a new API endpoint /courses/all that returns a list of courses. This API will be used to retrieve information about all available courses.
NOTE: Add a common prefix of /admin at the class level in CourseController.
API Details:
API Endpoint: /courses/all
HTTP Method: GET
Response Body: JSON
[
  {
    ""id"": 1,
    ""title"": ""Course 1"",
    ""archived"": false
  },
  {
    ""id"": 2,
    ""title"": ""Course 2"",
    ""archived"": true
  },
  ...
]
API Implementation:
Course Entity:
Create the Course entity class with the following fields:
id (int)
title (String)
picture (String)
archived (Boolean)
updatedAt (LocalDateTime)
createdAt (LocalDateTime)
description (String)
liveLink (String)
Annotate the entity with appropriate JPA annotations for database mapping, such as @entity, @table, @id, @GeneratedValue, @column, etc.
Create an API endpoint that returns a list of all courses.
Define the appropriate request method (e.g., GET).
Implement the service logic to fetch the list of courses from the Course repository and return it as a response.
Service and Repository:
Implement the service class (courseService) method getAllCourses() to interact with the repository.
Implement a repository class (courseRepo) method to fetch all course names.",
Product Backlog Item,,,4.BE-J-T16,,Java Task-16: Development of the Get Specific Course API using Course ID,"Task 16: Development of the /courses/{courseId} API #16
Description:
We need to develop a new API endpoint /courses/{courseId} that retrieves detailed information about a specific course. This API will allow users to access information related to courses they are enrolled in or for administrative purposes.
API Details:
API Endpoint: /courses/{courseId
HTTP Method: GET
Response Format: JSON
Sample JSON Request:
N/A (This is a GET request and doesn't require a request body)
Sample Response Body:
{
  ""id"": 1,
  ""title"": ""Course Title"",
  ""picture"": ""course_image.jpg"",
  ""archive"": false,
  ""liveLink"": ""https://example.com/course/live"",
  ""description"": ""Course description"",
  ""createdAt"": ""2023-10-15T12:00:00"",
  ""updatedAt"": ""2023-10-15T14:30:00"",
  ""projectFiles"": [""project1.pdf"", ""project2.pdf""],
  ""resourceFiles"": [""resource1.doc"", ""resource2.doc""],
  ""modulesOrder"": [1, 2, 3],
  ""modules"": [
    {
      ""id"": 1,
      ""title"": ""Module 1"",
      ""topics"": [""Topic 1"", ""Topic 2""]
    },
    {
      ""id"": 2,
      ""title"": ""Module 2"",
      ""topics"": [""Topic 1"", ""Topic 2""]
    }
  ],
  ""resumeFiles"": [""resume1.pdf"", ""resume2.pdf""],
  ""assignments"": [""assignment1.pdf"", ""assignment2.pdf""],
  ""enrolledBy"": [101, 102]
}
API Implementation:
Implement a new endpoint in the course service that retrieves course details based on the provided courseId.
Define the CourseDetailsResponse class to specify the expected fields in the response.
The API should handle scenarios where the provided courseId is not found or if the user is not authorized to access the course.",
Product Backlog Item,,,4.BE-J-T17,,Java Task-17: Update Course API using Course ID,"Task 17: Update Course API - /courses/{courseId} #17
Description:
We need to enhance the /courses/{courseId} API to support updating course details, including the course title, description, and picture. Additionally, the API should allow the user to upload a new picture for the course.
API Details:
API Endpoint: /courses/{courseId}
HTTP Method: PUT
Request Parameters:
courseId (Path Variable) - The ID of the course to be updated.
courseDetails (Form Data) - Course details including title and description.
picture (Form Data) - New course picture to be uploaded.
Sample JSON Request:
N/A (This is a PUT request, and request parameters are in the form data).
Sample JSON Response:
{
  ""id"": 1,
  ""title"": ""Updated Course Title"",
  ""picture"": ""updated_course_image.jpg"",
  ""archive"": false,
  ""liveLink"": ""https://example.com/course/live"",
  ""description"": ""Updated course description"",
  ""createdAt"": ""2023-10-15T12:00:00"",
  ""updatedAt"": ""2023-10-15T15:30:00"",
  ""projectFiles"": [""project1.pdf"", ""project2.pdf""],
  ""resourceFiles"": [""resource1.doc"", ""resource2.doc""],
  ""modulesOrder"": [1, 2, 3],
  ""modules"": [
    {
      ""id"": 1,
      ""title"": ""Module 1"",
      ""topics"": [""Topic 1"", ""Topic 2""]
    },
    {
      ""id"": 2,
      ""title"": ""Module 2"",
      ""topics"": [""Topic 1"", ""Topic 2""]
    }
  ],
  ""resumeFiles"": [""resume1.pdf"", ""resume2.pdf""],
  ""assignments"": [""assignment1.pdf"", ""assignment2.pdf""],
  ""enrolledBy"": [101, 102]
}
API Implementation:
Implement a new endpoint in the course service that updates the course details based on the provided courseId.
Define the CourseDetailsResponse class to specify the expected fields in the response.
Additional Info:
The API should handle scenarios where the provided courseId is not found or if the user is not authorized to update the course.",
Product Backlog Item,,,4.BE-J-T18,,Java Task-18: Implement Live Class Link for Course API using Course ID,"Task 18: Implement Live Class Link for Course API - /courses/{courseId}/live-link #18
Description:
We need to implement the /courses/{courseId}/live-link API to allow updating the live class link for a specific course. This API will accept a POST request with the new live class link in the request body.
API Details:
API Endpoint: /courses/{courseId}/live-link
HTTP Method: PATCH
Request Parameters:
courseId (Path Variable) - The ID of the course for which the live class link will be updated.
Request Body:
A JSON object containing the new live class link:
{
  ""link"": ""https://new-live-link.com""
}
Response Body
{
  ""message"": ""Live Class Link updated Successfully""
}
Response Format: JSON
API Implementation:
Implement the /courses/{courseId}/live-link endpoint in the course service, which updates the live class link based on the provided courseId.
Return a JSON response indicating the success of the update.
Additional Info:
Ensure that the API handles scenarios where the provided courseId is not found.
Validate the format of the live class link to ensure it is a valid URL.
Ensure that the updatedAt timestamp for the course is accurately updated.
Include appropriate error handling in the implementation to handle exceptions or invalid input data.",
Product Backlog Item,,,4.BE-J-T19,,Java Task-19: Update Course Archive StatUSAPI using Course ID,"Task 19: Update Course Archive Status API - /courses/{courseId}/archived #19
Description:
We have to implemented the /courses/{courseId}/archived API, which allows for updating the archive status of a specific course. This API accepts a PATCH request to mark a course as archived or unarchived.
API Details:
API Endpoint: /courses/{courseId}/archived
HTTP Method: PATCH
Request Parameters:
courseId (Path Variable) - The ID of the course for which the archive status has been updated.
Sample Request Body:
{
  ""archive"": true
}
Sample Response:
Response Format: Plain Text
Response Content: ""Course Archive Status Updated Successfully""
Additional Info:
The implementation successfully updates the archive status of the course based on the provided courseId.
When archive is set to true, the course is marked as archived. When archive is set to false, the course is marked as unarchived.
Error handling has been incorporated to address potential exceptions or invalid input data.
The API correctly handles scenarios where the provided courseId is not found.
The implementation updates the archived field in the course table and provides the appropriate response indicating the status change.",
Product Backlog Item,,,4.BE-J-T20,,Java Task-20: Upload Project File API for a Specific Course,"Task 20: Upload Project File API - /courses/{courseId}/projects #20
Description:
We need to implement the /courses/{courseId}/projects API, which allows users to upload project files for a specific course. This API accepts a POST request to upload a project file, and it performs the necessary operations to store the file in Azure Blob Storage.
API Details:
API Endpoint: /courses/{courseId}/projects
HTTP Method: POST
Request Parameters:
courseId (Path Variable) - The ID of the course to which the project file will be uploaded.
Request Body:
Multipart form data containing the project file to be uploaded.
Response:
Response Format: Plain Text
Response Content: ""OK""
Additional Info:
The implementation successfully handles file upload for the specified course.
It checks if the uploaded file is not empty and handles scenarios where the file is missing.
The file is stored in Azure Blob Storage, and the URL is saved in the database.
Appropriate error handling is in place, ensuring that the API provides clear responses for different scenarios.
The API is transactional, guaranteeing data consistency during file storage and database update.",
Product Backlog Item,,,4.BE-J-T21,,Java Task-21: Delete Project File API for a Specific Course,"Task 21: Delete Project File API - /courses/{courseId}/projects #21
Description:
We have successfully implemented the /courses/{courseId}/projects API, which allows users to delete project files associated with a specific course. This API accepts a DELETE request and deletes the specified project file from Azure Blob Storage and the associated database record.
API Details:
API Endpoint: /courses/{courseId}/projects
HTTP Method: DELETE
Request Parameters:
courseId (Path Variable) - The ID of the course from which the project file will be deleted.
Request Body:
A JSON string containing the name of the project file to be deleted.
 {
 ""projectFile"": ""file-to-delete.ext""
 }
Response Body (Example):
{
  ""courseId"": 123,
  ""projectFile"": ""file-to-delete.ext""
}
Additional Info:
The implementation successfully handles project file deletion for the specified course.
It verifies that the project file name is provided in the request.
The project file is deleted from Azure Blob Storage and the associated record from the database.
Appropriate error handling is in place, ensuring that the API provides clear responses for different scenarios.
The API is transactional, guaranteeing data consistency during file deletion and database update.",
Product Backlog Item,,,4.BE-J-T22,,Java Task-22: Upload Resource File API for a Specific Course,"Task 22: Upload Resource File API - /courses/{courseId}/resources #22
Description:
We need to implement the /courses/{courseId}/resources API, which allows users to upload resource files for a specific course. This API accepts a POST request and uploads the provided resource file to Azure Blob Storage, along with the associated database record.
API Details:
API Endpoint: /courses/{courseId}/resources
HTTP Method: POST
Request Parameters:
courseId (Path Variable) - The ID of the course to which the resource file will be uploaded.
Request Body:
A multipart-form request containing the resource file to be uploaded.
Response Format: JSON
Request (Example):
Multipart Form:
 {
 ""filename"": resource-file.ext 
}
Response Body (Example):
{
  ""message"": ""Resource file uploaded successfully.""
}
Additional Info:
The implementation successfully handles resource file uploads for the specified course.
It verifies that the uploaded file is not empty.
The resource file is uploaded to Azure Blob Storage, and the associated record is stored in the database.
Appropriate error handling is in place, ensuring that the API provides clear responses for different scenarios.",
Product Backlog Item,,,4.BE-J-T23,,Java Task-23: Delete Resource File API for a Specific Course,"Task 23: Delete Resource File API - /courses/{courseId}/resources #23
Description:
We need to implement the /courses/{courseId}/resources delete API, which allows users to delete a resource file associated with a specific course. This API accepts a DELETE request, specifying the course ID and the name of the resource file to be deleted. It deletes the specified resource file from Azure Blob Storage and removes the associated record from the database.
API Details:
API Endpoint: /courses/{courseId}/resources
HTTP Method: DELETE
Request Parameters:
courseId (Path Variable) - The ID of the course from which the resource file will be deleted.
Request Body:
A string representing the name of the resource file to be deleted.
Response (Example):
{
  ""courseId"": 123,
  ""resourceFile"": ""resource-file.ext""
}
Additional Info:
The implementation successfully handles resource file deletion for the specified course.
It checks if the resourceFile parameter is provided in the request body.
The resource file is deleted from Azure Blob Storage, and the associated database record is removed.
Appropriate error handling is in place, ensuring that the API provides clear responses for different scenarios.",
Product Backlog Item,,,4.BE-J-T24,,Java Task-24: Create a New Course Endpoint,"Task 24: Creating a New Course Endpoint #24
Description:
This API is designed for creating new courses in a learning platform. Users can send a POST request to this endpoint to create a course. It expects details about the course, including the course title, description, and an optional course image (e.g., a cover image for the course). The image is stored in Azure Blob Storage, and course details are saved in the database.
API Details:
Endpoint: POST /admin
Request:
Users need to send a POST request with form data that includes the course title, course description, and an image file (if available).
Request Body Example:
{
   ""title"": ""Introduction to Programming"",
   ""description"": ""Learn the fundamentals of programming."",
   ""picture"": (image file)
}
Response:
Upon successful course creation, the API responds with the created course, including its unique identifier, title, creation date, and an image URL (if an image was uploaded).
Response Body Example:
{
   ""id"": 1,
   ""title"": ""Introduction to Programming"",
   ""createdAt"": ""2023-10-15T12:00:00"",
   ""picture"": ""https://example.com/images/intro-to-programming.jpg""
}
API Implementation:
It validates the request to ensure that the course title is not empty and that the image file is provided.
The image file is stored in Azure Blob Storage, and the course details are saved in the database.
Proper error handling is implemented to address scenarios where the request is incomplete or malformed.
Detailed logging is employed to track API actions and errors.
Additional Info:
If the image file is missing from the request or is empty, the API will throw an exception indicating that an image upload is required.
The creation date of the course is set to the current date and time.
The ""archived"" status of the course is set to ""false"" by default.
Azure Blob Storage is used to store images, ensuring efficient management of course images.
The API response includes the newly created course's ID, title, creation date, and an image URL.",
Product Backlog Item,,,4.BE-J-T25,,Java Task-25: Implement Update Role API under Admin Controller,"Task 25: Implement /admin/updateRole api under AdminController #25
Description:
Developers need to implement the  /admin/updateRole api to handle role updates based on the provided email.
API Details:
HTTP Method: PUT
Endpoint: /admin/updateRole
Request Body:
Parameter: email (String, required) - The email of the user whose role needs to be updated.
Response:
Success Response: HTTP Status Code: 200 OK
Body: ""User role updated successfully.""
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing email or other input validation issues.
HTTP Status Code: 404 Not Found
Body: Custom error message in case the user with the provided email is not found.
Implementation Details:
Logs an entry ""Inside adminControl method.""
Validates the email parameter, throwing a custom error if it's empty.
Removes double quotes from the email string.
Queries the database for a user with the given email (case-insensitive) and throws an error if the user is not found.
Updates the user's role, toggling between ""USER"" and ""ADMIN.""
Logs an exit entry ""Exiting from adminControl method.""
Additional Information:
Ensure that proper documentation and comments are added for clarity and maintainability.",
Product Backlog Item,,,4.BE-J-T26,,Java Task-26: Implement Enrolled Users List API with Pagination for a Course,"Task 26: Implement /courses/{courseId}/enrolled{page} API for Enrolled Users #26
Description:
This GitHub issue aims to implement the/courses/{courseId}/enrolled{page} API within the AdminController, allowing users to retrieve enrolled users for a given course and page while ensuring clear and well-documented code.
API Details:
HTTP Method: GET
Endpoint: /courses/{courseId}/enrolled{page}
Path Parameters:
courseId (Integer, required) - The ID of the course for which you want to retrieve enrolled users.
Query Parameters:
page (Integer, required) - The page number for paginated results.
Response:
Success Response: HTTP Status Code: 200 OK
Body:
A JSON object containing the list of enrolled users. Here's an example structure:
{
    ""limit"": 10,
    ""start"": 0,
    ""users"": [ /* List of enrolled user objects */ ],
    ""total"": 123, // Total number of enrolled users
    ""length"": 10 // Number of users in this response
}
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters.
HTTP Status Code: 404 Not Found
Body: Custom error message in case the course with the provided ID is not found.
Implementation Details:
Logs an entry ""Inside getAllUsers method.""
Validates the courseId parameter and throws a custom error if it's missing or equal to 0.
Sets the offset and limit based on the provided page parameter.
Fetches the list of enrolled users associated with the course using userRepo.getAllByUserId.
Logs the number of users found.
Creates a UserResponse object and populates it with the retrieved data.
Logs an exit entry ""Exiting from getAllUsers method.""
Returns the UserResponse as a JSON response.",
Product Backlog Item,,,4.BE-J-T27,,Java Task-27: Implement User Enrollment API under Admin Controller for a Course,"Task 27: Implement /courses/{courseId}/enrolled API for User Enrollment under Admin Controller #27
Description:
Develop an api /courses/{courseId}/enrolled to handle user enrollment based on the provided courseId and emailIds.
API Details:
HTTP Method: PUT
Endpoint: /courses/{courseId}/enrolled
Path Parameters:
courseId (Integer, required) - The ID of the course to which users will be enrolled.
Request Body:
emailIds (String, required) - Comma-separated email addresses of the users to be enrolled.
Response:
Success Response: HTTP Status Code: 200 OK
Body: ""User enrolled Successfully.""
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters, or if the user is already enrolled.
HTTP Status Code: 404 Not Found
Body: Custom error message in case the course or user with the provided information is not found.
Implementation Details:
Logs an entry ""Inside enrollUsers method.""
Validates the emailIds parameter, throwing a custom error if it's empty.
Removes spaces from the emailIds string.
Splits the emailIds string into an array of email addresses.
For each email address:
- Removes double quotes from the email.
- Retrieves the user associated with the email.
- Checks if the course exists.
- Checks if the user is already enrolled in the course.
- Creates a new user enrollment record if the user is not already enrolled.
Logs an exit entry ""Exiting enrollUsers method.""
Returns a 200 OK response with the message ""User enrolled Successfully.""
Additional Information:
Ensure that the code handles error cases, such as missing or invalid parameters, and checks for existing user enrollments.",
Product Backlog Item,,,4.BE-J-T28,,Java Task-28: Implement API to Delete User Enrollment under Admin Controller for a Course,"Task 28: Implement /courses/{courseId}/enrolled/{user} api under AdminController to delete enrollment #28
Description:
Develop an api /courses/{courseId}/enrolled/{user} to allow users to unenroll from a course by providing the user's email address and the course ID.
API Details:
HTTP Method: DELETE
Endpoint: /courses/{courseId}/enrolled/{user}
Path Parameters:
courseId (Integer, required) - The ID of the course from which the user will be unenrolled.
user (String, required) - The email address of the user to be unenrolled.
Response:
Success Response: HTTP Status Code: 200 OK
Body: ""User unenrolled successfully.""
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters, or if the user is not found.
HTTP Status Code: 404 Not Found
Body: Custom error message in case the user enrollment record is not found for the provided course and user.
Implementation Details:
Logs an entry ""Inside deleteUser method.""
Validates the email parameter, throwing a custom error if it's empty.
Retrieves the user associated with the provided email address.
Deletes the user enrollment record for the user and course using userEnrollmentRepo.deleteByUserIdAndCourseId(user.getId(), courseId).
Checks if any records were deleted (isDeleted == 0); if no records were deleted, throw an error indicating that the user was not found in the course.
Logs an exit entry ""Exiting from deleteUser method.""
Returns a 200 OK response with the message ""User unenrolled successfully.""
Additional Information:
Ensure that the code is properly documented with comments for clarity and maintainability.
Error handling should cover cases such as missing or invalid parameters and user not found in the course.",
Product Backlog Item,,,4.BE-J-T29,,Java Task-29: Implement Module Creation API for a Course,"Task 29: Implement /courses/{courseId}/modules API for Module Creation #29
Description:
This GitHub issue is for implementing the /courses/{courseId}/modules API, which allows the creation of new modules within a course, including specifying module title and topics.
NOTE: Every api under ModuleController should have common enpoint prefix admin. So our final api endpoint will be /admin//courses/{courseId}/modules .
API Details:
HTTP Method: POST
Endpoint: /courses/{courseId}/modules
Request:
Path Parameters:
courseId (Integer, required) - The ID of the course to which the module will be added.
Request Body:
CourseModuleDetail (JSON object, required) - Contains module details including title and topics.
{
  ""title"": ""New Module Title"",
  ""topics"": [
    {
      ""title"": ""Topic 1 Title"",
      ""videoLink"": ""https://example.com/video1""
    },
    {
      ""title"": ""Topic 2 Title"",
      ""videoLink"": ""https://example.com/video2""
    }
  ]
}
Response:
Success Response: HTTP Status Code: 200 OK
Body: JSON object of UpdateModuleResponse with module details.
{
  ""id"": 123,
  ""title"": ""Module Title""
}
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters, or if the module with the same title already exists.
Implementation Steps:
Check if the module title in courseModuleDetail is empty and throw an error if it is.
Ensure that the courseModuleDetail includes at least one topic.
Check if a module with the same title already exists, and throw an error if it does.
Create a new module and save it in the database.
Create topic objects for each topic in the courseModuleDetail and associate them with the newly created module.
Return a response with module details in the UpdateModuleResponse format.
Additional Info:
Ensure proper code documentation for clarity and maintainability.
Create and save new topic records based on the data provided in courseModuleDetail.
Return a response with the updated module details in the UpdateModuleResponse format.
Additional Information:
Ensure proper code documentation for clarity and maintainability.",
Product Backlog Item,,,4.BE-J-T30,,Java Task-30: Implement Module Update API using Module ID for a Course,"Task 30: Implement /courses/{courseId}/modules/{moduleId} api for Module Update #30
Description:
This GitHub issue is for implementing the /courses/{courseId}/modules/{moduleId}  API, which allows users to update an existing module's details, including its title and topics.
API Details:
HTTP Method: PUT
Endpoint: /courses/{courseId}/modules/{moduleId}
Path Parameters:
moduleId (Integer, required) - The ID of the module to be updated.
Request Body:
CourseModuleDetail (JSON object, required) - Contains module details including title and topics.
Sample Request Body:
{
  ""title"": ""Updated Module Title"",
  ""topics"": [
    {
      ""title"": ""Updated Topic 1 Title"",
      ""videoLink"": ""https://example.com/updated_video1""
    },
    {
      ""title"": ""Updated Topic 2 Title"",
      ""videoLink"": ""https://example.com/updated_video2""
    }
  ]
}
Response:
Success Response: HTTP Status Code: 200 OK
Body:
JSON object of UpdateModuleResponse with updated module details.
{
  ""id"": 123,
  ""title"": ""Updated Module Title""
}
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters or if the module with the same title already exists.
Implementation Steps:
Check if the courseModuleDetail includes at least one topic.
Retrieve the existing module by its ID.
Update the module's title and update time in the database.
Delete existing topic records associated with the module.
Create and save new topic records based on the data provided in courseModuleDetail.
Return a response with the updated module details in the UpdateModuleResponse format.
Additional Information:
Ensure proper code documentation for clarity and maintainability.",
Product Backlog Item,,,4.BE-J-T31,,Java Task-31: Implement Module Deletion using Module ID for a Course,"Task 31: Implement /courses/{courseId}/modules/{moduleId} for Module Deletion #31

Description:
This GitHub issue is for implementing the /courses/{courseId}/modules/{moduleId} API, which allows users to delete an existing module within a course based on the provided module ID.
API Details:
HTTP Method: DELETE
Endpoint: /courses/{courseId}/modules/{moduleId}
Path Parameters:
moduleId (Integer, required) - The ID of the module to be deleted.
Response:
Success Response: HTTP Status Code: 200 OK
Body: ""OK"" to indicate successful deletion.
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters or if the module does not exist.
Implementation Steps:
Attempt to delete the module with the provided module ID.
Check the result of the deletion operation and return a 400 Bad Request response with an error message if the module does not exist.
Return a 200 OK response with ""OK"" to indicate successful deletion.
Additional Information:
Ensure proper code documentation for clarity and maintainability.",
Product Backlog Item,,,4.BE-J-T32,,Java Task-32: Implement Module Order Update API using Module ID for a Course,"Task 32: Implement /courses/{courseId}/modules/{moduleId} API for Module Order Update #32
Description:
This GitHub issue is for implementing the updateModuleOrder API, which allows users to update the order of modules within a course based on the provided moduleId and order (either ""up"" or ""down"").
API Details:
HTTP Method: PATCH
Endpoint: /courses/{courseId}/modules/{moduleId}
Path Parameters:
courseId (Integer, required) - The ID of the course containing the modules.
moduleId (Integer, required) - The ID of the module to update.
Query Parameter:
order (String, required) - The desired order change, either ""up"" or ""down.""
Response:
Success Response: HTTP Status Code: 200 OK
Body: ""OK"" to indicate a successful update.
Error Responses:
HTTP Status Code: 400 Bad Request
Body: Custom error message in case of missing or invalid parameters, or if the module or requested order change is not found.
Implementation Steps:
Retrieve all modules for the given course.
Check if the list of modules is empty, and handle this scenario if needed.
Find the module to update by its moduleId.
Calculate the new module order based on the desired ""up"" or ""down"" change.
Update the order of the selected module and the module it swaps with.
Save the changes to the database.
Return a 200 OK response with ""OK"" to indicate a successful update.
Additional Information:
Ensure proper code documentation for clarity and maintainability.",